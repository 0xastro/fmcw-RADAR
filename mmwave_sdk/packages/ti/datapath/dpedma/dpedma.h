/**
 *   @file  dpedma.h
 *
 *   @brief
 *      EDMA Configuration Utility API definitions.
 *
 *  \par
 *  NOTE:
 *      (C) Copyright 2018 Texas Instruments, Inc.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *    Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the
 *    distribution.
 *
 *    Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef DPEDMA_H
#define DPEDMA_H

/* Include Files */
#include <ti/drivers/edma/edma.h>
#include <ti/datapath/dpif/dp_error.h>

/**
@defgroup DPEDMA_EXTERNAL_FUNCTION            DataPath EDMA External Functions
@ingroup DP_EDMA
@brief
*   The section has a list of all the exported API which the applications need to
*   invoke in order to use the DataPath EDMA
*/
/**
@defgroup DPEDMA_EXTERNAL_DATA_STRUCTURE      DataPath EDMA External Data Structures
@ingroup DP_EDMA
@brief
*   The section has a list of all the data structures which are exposed to the application
*/
/**
@defgroup DPEDMA_ERROR_CODE                   DataPath EDMA Error Codes
@ingroup DP_EDMA
@brief
*   The section has a list of all the error codes which are generated by the module
*/
/**
@defgroup DPEDMA_INTERNAL_FUNCTION            DataPath EDMA Internal Functions
@ingroup DP_EDMA
@brief
*   The section has a list of all internal API which are not exposed to the external
*   applications.
*/
/**
@defgroup DPEDMA_INTERNAL_DATA_STRUCTURE      DataPath EDMA Internal Data Structures
@ingroup DP_EDMA
@brief
*   The section has a list of all internal data structures which are used internally
*   by the DataPath EDMA module.
*/
/**
@defgroup DPEDMA_INTERNAL_DEFINITION          DataPath EDMA Internal Definitions
@ingroup DP_EDMA
@brief
*   The section has a list of all internal definitions which are used internally
*   by the DataPath EDMA.
*/

#ifdef __cplusplus
extern "C" {
#endif

/** @addtogroup DPEDMA_ERROR_CODE
 *  Base error code for the dpedma is defined in the
 *  \include ti/datapath/dpif/dp_error.h
 @{ */

/**
 * @brief   Error Code: Invalid argument
 */
#define DPEDMA_EINVAL                  (DP_ERRNO_DPEDMA_BASE-1)

/**
@}
*/

/**
 * @brief
 *  EDMA channel configuration
 *
 * @details
 *  The structure is used to hold the EDMA channel configuration
 *
 *  \ingroup DPEDMA_EXTERNAL_DATA_STRUCTURE
 */
typedef struct DPEDMA_ChanCfg_t
{
    /*!< @brief     EDMA channel id */
    uint8_t             channel;

    /*!< @brief     EDMA channel shadow id */
    uint16_t            channelShadow;

    /*!< @brief     EDMA event Queue used for the transfer */
    uint8_t             eventQueue;
}DPEDMA_ChanCfg;

/**
 * @brief
 *  EDMA channel configuration with 3 shadow channels.
 *
 * @details
 * The structure is used to hold the EDMA channel configuration for 1 EDMA channel 
 * which is linked to 3 shadow channels. 
 *
 *  \ingroup DPEDMA_EXTERNAL_DATA_STRUCTURE
 */
typedef struct DPEDMA_3LinkChanCfg_t
{
    /*!< @brief     EDMA channel id */
    uint8_t             channel;

    /*!< @brief     EDMA channel shadow id */
    uint16_t            channelShadow[3];

    /*!< @brief     EDMA event Queue used for the transfer */
    uint8_t             eventQueue;
}DPEDMA_3LinkChanCfg;

/**
 * @brief
 *  EDMA chaining configuration
 *
 * @details
 *  The structure is used to hold the EDMA channel chaining configuration
 *
 *  \ingroup DPEDMA_EXTERNAL_DATA_STRUCTURE
 */
typedef struct DPEDMA_ChainingCfg_t
{
    /*!< @brief     EDMA chaining channel id */
    uint8_t     chainingChan;

    /*!< @brief     EDMA intermediate chaining flag */
    bool        isIntermediateChainingEnabled;

    /*!< @brief     EDMA final chaining flag */
    bool        isFinalChainingEnabled;
}DPEDMA_ChainingCfg;

/**
 * @brief
 *  EDMA configuration for Sync A copy
 *
 * @details
 *  The structure is used to hold the sync A configuration 
 *
 *  \ingroup DPEDMA_EXTERNAL_DATA_STRUCTURE
 */
typedef struct DPEDMA_syncACfg_t
{
    /*!< @brief     Source Address */
    uint32_t    srcAddress;

    /*!< @brief     Destination Address */
    uint32_t    destAddress;

    /*!< @brief     a count */
    uint16_t    aCount;

    /*!< @brief     b count */
    uint16_t    bCount;

    /*!< @brief     source B index */
    uint16_t    srcBIdx;

    /*!< @brief     destination B index */
    uint16_t    dstBIdx;
}DPEDMA_syncACfg;

/**
 * @brief
 *  EDMA configuration for Sync AB copy
 *
 * @details
 *  The structure is used to hold the sync AB configuration 
 *
 *  \ingroup DPEDMA_EXTERNAL_DATA_STRUCTURE
 */
typedef struct DPEDMA_syncABCfg_t
{
    /*!< @brief     Source Address */
    uint32_t    srcAddress;

    /*!< @brief     Destination Address */
    uint32_t    destAddress;

    /*!< @brief     a count */
    uint16_t    aCount;

    /*!< @brief     b count */
    uint16_t    bCount;

    /*!< @brief     c count */
    uint16_t    cCount;

    /*!< @brief     source B index */
    uint16_t    srcBIdx;

    /*!< @brief     destination B index */
    uint16_t    dstBIdx;

    /*!< @brief     source C index */
    uint16_t    srcCIdx;

    /*!< @brief     destination C index */
    uint16_t    dstCIdx;
}DPEDMA_syncABCfg;

extern int32_t DPEDMA_configSyncAB
(
    EDMA_Handle             handle,
    DPEDMA_ChanCfg          *chanCfg,
    DPEDMA_ChainingCfg      *chainingCfg,
    DPEDMA_syncABCfg        *syncABCfg,
    bool                    isEventTriggered,
    bool                    isIntermediateTransferCompletionEnabled,
    bool                    isTransferCompletionEnabled,
    EDMA_transferCompletionCallbackFxn_t transferCompletionCallbackFxn,
    uintptr_t               transferCompletionCallbackFxnArg);

extern int32_t DPEDMA_configSyncA_singleFrame
(
    EDMA_Handle             handle,
    DPEDMA_ChanCfg          *chanCfg,
    DPEDMA_ChainingCfg      *chainingCfg,
    DPEDMA_syncACfg         *syncACfg,
    bool                    isEventTriggered,
    bool                    isIntermediateTransferInterruptEnabled,
    bool                    isTransferCompletionEnabled,
    EDMA_transferCompletionCallbackFxn_t transferCompletionCallbackFxn,
    uintptr_t               transferCompletionCallbackFxnArg
);

extern int32_t DPEDMA_updateAddressAndTrigger
(
    EDMA_Handle handle,
    uint32_t    srcAddress,
    uint32_t    destAddress,
    uint8_t     channel,
    uint8_t     triggerEnabled
);

#ifdef __cplusplus
}
#endif

#endif
