/**
 *   @file  test_vector_aes.h
 *
 *   @brief
 *      This file contains the various AES test vectors to test the crypto driver.
 *
 *  \par
 *  NOTE:
 *      (C) Copyright 2017 Texas Instruments, Inc.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *    Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the
 *    distribution.
 *
 *    Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef TEST_VECTOR_AES_H
#define TEST_VECTOR_AES_H

#ifdef __cplusplus
extern "C" {
#endif

/* Standard Include Files. */
#include <stdint.h>
#include <stdlib.h>
#include <stddef.h>
#include <string.h>
#include <stdio.h>
#include <math.h>

/* BIOS/XDC Include Files. */
#include <xdc/std.h>
#include <xdc/cfg/global.h>

/* mmWave SDK Include Files: */
#include <ti/drivers/crypto/Crypto.h>

/**************************************************************************
 *************************** Local Definitions ****************************
 **************************************************************************/

#define TEST_AES_MAX_KEY_SIZE       32U         /* Max key size is 256 bits = 32 bytes */
#define TEST_AES_IV_SIZE            16U         /* IV is 16 bytes */
#define TEST_AES_MAX_DATA_LEN       1024U       /* 1K byte buffer */

static uint8_t* aesModeString[]={
        "Not supported",
        "ECB",
        "CBC",
        "CTR",
        "ICM",
        "CFB",
        "GCM",
        "CCM"
};

/* Defines the AES test vectors */
typedef struct aesTestVector_t
{
    Crypto_AESMode      mode;
    Crypto_AesKeySize   key1Size;
    uint8_t             key1[TEST_AES_MAX_KEY_SIZE];
    Crypto_AesKeySize   key2Size;
    uint8_t             key2[TEST_AES_MAX_KEY_SIZE];
    uint8_t             inputText[TEST_AES_MAX_DATA_LEN];
    uint32_t            dataLen;
    uint8_t             iv[TEST_AES_IV_SIZE];
    uint8_t             outputText[TEST_AES_MAX_DATA_LEN + 4U]; /* Additional 4 bytes for padded case */
    uint32_t            authLen;                                /* length of the AAD in bytes */
    uint8_t             tag[16U];                               /* 4-word array where the hash tag is written */
    uint32_t            userInput1;                             /* Special values to be configured for the mode parameters */
    uint32_t            userInput2;                             /* Special values to be configured for the mode parameters */
}aesTestVector;

/* Defines the Crypto test cases */
typedef struct CryptoAesTestCases_t
{
    void*               testData;
}CryptoAesTestCases;

/**************************************************************************
 *************************** AES test Vectors *****************************
 **************************************************************************/
static aesTestVector aesTestVec_CBC128BitKey_1 =
{
    Crypto_AES_CBC, /* Mode */
    Crypto_AES_KEY_SIZE_128BIT, /* Key 1 size */
    { /* Key 1 */
        0x6c, 0x3e, 0xa0, 0x47, 0x76, 0x30, 0xce, 0x21, 0xa2, 0xce, 0x33, 0x4a, 0xa7, 0x46, 0xc2, 0xcd
    },
    Crypto_AES_KEY_SIZE_128BIT, /* Key 2 size. Depends on mode */
    { /* Key 2. Depends on mode */
        0x0U, 0x0U, 0x0U, 0x0U
    },
    { /* Input Plain text */
        "This is a 48-byte message (exactly 3 AES blocks)"
    },
    48U, /* Input data size */
    { /* Initialization vector */
        0xc7, 0x82, 0xdc, 0x4c, 0x09, 0x8c, 0x66, 0xcb, 0xd9, 0xcd, 0x27, 0xd8, 0x25, 0x68, 0x2c, 0x81
    },
    {   /* Ciphered output */
        0xd0, 0xa0, 0x2b, 0x38, 0x36, 0x45, 0x17, 0x53, 0xd4, 0x93, 0x66, 0x5d, 0x33, 0xf0, 0xe8, 0x86, 0x2d, 0xea, 0x54,
        0xcd, 0xb2, 0x93, 0xab, 0xc7, 0x50, 0x69, 0x39, 0x27, 0x67, 0x72, 0xf8, 0xd5, 0x02, 0x1c, 0x19, 0x21, 0x6b, 0xad,
        0x52, 0x5c, 0x85, 0x79, 0x69, 0x5d, 0x83, 0xba, 0x26, 0x84
    }
};

static aesTestVector aesTestVec_CBC128BitKey_2 =
{
    Crypto_AES_CBC, /* Mode */
    Crypto_AES_KEY_SIZE_128BIT, /* Key 1 size */
    { /* Key 1 */
        0x56, 0xe4, 0x7a, 0x38, 0xc5, 0x59, 0x89, 0x74, 0xbc, 0x46, 0x90, 0x3d, 0xba, 0x29, 0x03, 0x49
    },
    Crypto_AES_KEY_SIZE_128BIT, /* Key 2 size. Depends on mode */
    { /* Key 2. Depends on mode */
        0x0U, 0x0U, 0x0U, 0x0U
    },
    { /* Input Plain text */
        0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0,
        0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1,
        0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2,
        0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf
    },
    64U, /* Input data size */
    { /* Initialization vector */
        0x8c, 0xe8, 0x2e, 0xef, 0xbe, 0xa0, 0xda, 0x3c, 0x44, 0x69, 0x9e, 0xd7, 0xdb, 0x51, 0xb7, 0xd9
    },
    {   /* Ciphered output */
        0xc3, 0x0e, 0x32, 0xff, 0xed, 0xc0, 0x77, 0x4e, 0x6a, 0xff, 0x6a, 0xf0, 0x86, 0x9f, 0x71, 0xaa,
        0x0f, 0x3a, 0xf0, 0x7a, 0x9a, 0x31, 0xa9, 0xc6, 0x84, 0xdb, 0x20, 0x7e, 0xb0, 0xef, 0x8e, 0x4e,
        0x35, 0x90, 0x7a, 0xa6, 0x32, 0xc3, 0xff, 0xdf, 0x86, 0x8b, 0xb7, 0xb2, 0x9d, 0x3d, 0x46, 0xad,
        0x83, 0xce, 0x9f, 0x9a, 0x10, 0x2e, 0xe9, 0x9d, 0x49, 0xa5, 0x3e, 0x87, 0xf4, 0xc3, 0xda, 0x55
    }
};

static aesTestVector aesTestVec_CBC192BitKey_1 =
{
    Crypto_AES_CBC, /* Mode */
    Crypto_AES_KEY_SIZE_192BIT, /* Key 1 size */
    { /* Key 1 */
        0x6c, 0x3e, 0xa0, 0x47, 0x76, 0x30, 0xce, 0x21, 0xa2, 0xce, 0x33, 0x4a,
        0xa7, 0x46, 0xc2, 0xcd, 0x6c, 0x3e, 0xa0, 0x47, 0x76, 0x30, 0xce, 0x21
    },
    Crypto_AES_KEY_SIZE_128BIT, /* Key 2 size. Depends on mode */
    { /* Key 2. Depends on mode */
        0x0U, 0x0U, 0x0U, 0x0U
    },
    { /* Input Plain text */
        "This is a 48-byte message (exactly 3 AES blocks)"
    },
    48U, /* Input data size */
    { /* Initialization vector */
        0xc7, 0x82, 0xdc, 0x4c, 0x09, 0x8c, 0x66, 0xcb, 0xd9, 0xcd, 0x27, 0xd8, 0x25, 0x68, 0x2c, 0x81
    },
    {   /* Ciphered output */
        0xba, 0xf4, 0xd0, 0xf8, 0x56, 0xfb, 0xc4, 0x5d, 0x67, 0x36, 0x5d, 0x59, 0x82, 0x7b, 0x8f, 0x7f,
        0xd5, 0x55, 0x9f, 0x63, 0x1d, 0xc4, 0xb7, 0xd2, 0xeb, 0xa7, 0x87, 0x9e, 0x65, 0x98, 0x27, 0x27,
        0xd7, 0xa5, 0xab, 0xaa, 0xf6, 0xe3, 0x32, 0x5c, 0x81, 0x7a, 0x2b, 0x5a, 0x87, 0x62, 0x4b, 0x17
    }
};

static aesTestVector aesTestVec_CBC256BitKey_1 =
{
    Crypto_AES_CBC, /* Mode */
    Crypto_AES_KEY_SIZE_256BIT, /* Key 1 size */
    { /* Key 1 */
        0x6c, 0x3e, 0xa0, 0x47, 0x76, 0x30, 0xce, 0x21, 0xa2, 0xce, 0x33, 0x4a, 0xa7, 0x46, 0xc2, 0xcd,
        0x6c, 0x3e, 0xa0, 0x47, 0x76, 0x30, 0xce, 0x21, 0xa2, 0xce, 0x33, 0x4a, 0xa7, 0x46, 0xc2, 0xcd
    },
    Crypto_AES_KEY_SIZE_128BIT, /* Key 2 size. Depends on mode */
    { /* Key 2. Depends on mode */
        0x0U, 0x0U, 0x0U, 0x0U
    },
    { /* Input Plain text */
        "This is a 48-byte message (exactly 3 AES blocks)"
    },
    48U, /* Input data size */
    { /* Initialization vector */
        0xc7, 0x82, 0xdc, 0x4c, 0x09, 0x8c, 0x66, 0xcb, 0xd9, 0xcd, 0x27, 0xd8, 0x25, 0x68, 0x2c, 0x81
    },
    {   /* Ciphered output */
        0x13, 0x0d, 0xa5, 0xb2, 0x98, 0x48, 0xb1, 0x81, 0x0b, 0x17, 0x84, 0x14, 0x12, 0x00, 0xa4, 0xc8,
        0x54, 0xb6, 0xa1, 0x90, 0x67, 0x1c, 0x03, 0x80, 0xac, 0xf3, 0x21, 0xd1, 0x55, 0x64, 0x90, 0x38,
        0xb1, 0xb6, 0xc2, 0x7e, 0x49, 0x1b, 0x16, 0x47, 0x12, 0x2d, 0xb0, 0x4a, 0x80, 0x07, 0xb3, 0x2b
    }
};

static aesTestVector aesTestVec_CBC256BitKey_2 =
{
    Crypto_AES_CBC, /* Mode */
    Crypto_AES_KEY_SIZE_256BIT, /* Key 1 size */
    { /* Key 1 */
        0x56, 0xe4, 0x7a, 0x38, 0xc5, 0x59, 0x89, 0x74, 0xbc, 0x46, 0x90, 0x3d, 0xba, 0x29, 0x03, 0x49,
        0x56, 0xe4, 0x7a, 0x38, 0xc5, 0x59, 0x89, 0x74, 0xbc, 0x46, 0x90, 0x3d, 0xba, 0x29, 0x03, 0x49
    },
    Crypto_AES_KEY_SIZE_128BIT, /* Key 2 size. Depends on mode */
    { /* Key 2. Depends on mode */
        0x0U, 0x0U, 0x0U, 0x0U
    },
    { /* Input Plain text */
        0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0,
        0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1,
        0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2,
        0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf
    },
    64U, /* Input data size */
    { /* Initialization vector */
        0x8c, 0xe8, 0x2e, 0xef, 0xbe, 0xa0, 0xda, 0x3c, 0x44, 0x69, 0x9e, 0xd7, 0xdb, 0x51, 0xb7, 0xd9
    },
    {   /* Ciphered output */
        0x78, 0x04, 0x00, 0xcd, 0x0e, 0x89, 0x9e, 0x92, 0x78, 0x13, 0x23, 0xf4, 0xbb, 0xd2, 0x17, 0x55,
        0xe1, 0xfe, 0x52, 0x8b, 0x76, 0xee, 0xde, 0x28, 0xdb, 0xe5, 0x18, 0xfc, 0xe9, 0xe2, 0x84, 0x0e,
        0xae, 0x05, 0x4e, 0xe8, 0xdf, 0x06, 0xfa, 0x6f, 0x7a, 0xff, 0x0c, 0x07, 0x98, 0x61, 0x5e, 0x0b,
        0x19, 0xe2, 0xa8, 0x6d, 0x60, 0x87, 0x69, 0x95, 0xf5, 0xd7, 0x0c, 0xb5, 0x00, 0xdd, 0xc3, 0x3d
    }
};

static aesTestVector aesTestVec_CBC256BitKey_3 =
{
    Crypto_AES_CBC, /* Mode */
    Crypto_AES_KEY_SIZE_256BIT, /* Key 1 size */
    { /* Key 1 */
        0x56, 0xe4, 0x7a, 0x38, 0xc5, 0x59, 0x89, 0x74, 0xbc, 0x46, 0x90, 0x3d, 0xba, 0x29, 0x03, 0x49,
        0x56, 0xe4, 0x7a, 0x38, 0xc5, 0x59, 0x89, 0x74, 0xbc, 0x46, 0x90, 0x3d, 0xba, 0x29, 0x03, 0x49
    },
    Crypto_AES_KEY_SIZE_128BIT, /* Key 2 size. Depends on mode */
    { /* Key 2. Depends on mode */
        0x0U, 0x0U, 0x0U, 0x0U
    },
    { /* Input Plain text */
        0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
        0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0
    },
    33, /* Input data size */
    { /* Initialization vector */
        0x8c, 0xe8, 0x2e, 0xef, 0xbe, 0xa0, 0xda, 0x3c, 0x44, 0x69, 0x9e, 0xd7, 0xdb, 0x51, 0xb7, 0xd9
    },
    {   /* Ciphered output */
        0x78, 0x04, 0x00, 0xcd, 0x0e, 0x89, 0x9e, 0x92, 0x78, 0x13, 0x23, 0xf4, 0xbb, 0xd2, 0x17, 0x55,
        0xe1, 0xfe, 0x52, 0x8b, 0x76, 0xee, 0xde, 0x28, 0xdb, 0xe5, 0x18, 0xfc, 0xe9, 0xe2, 0x84, 0x0e,
        0x42, 0xb8, 0x5a, 0xc4, 0x51, 0x49, 0x30, 0x00, 0x10, 0x5e, 0x2c, 0x30, 0x17, 0x73, 0x1d, 0x68
    }
};

static aesTestVector aesTestVec_ECB128BitKey_1 =
{
    Crypto_AES_ECB, /* Mode */
    Crypto_AES_KEY_SIZE_128BIT, /* Key 1 size */
    { /* Key 1 */
        0x6c, 0x3e, 0xa0, 0x47, 0x76, 0x30, 0xce, 0x21, 0xa2, 0xce, 0x33, 0x4a, 0xa7, 0x46, 0xc2, 0xcd
    },
    Crypto_AES_KEY_SIZE_128BIT, /* Key 2 size. Depends on mode */
    { /* Key 2. Depends on mode */
        0x0U, 0x0U, 0x0U, 0x0U
    },
    { /* Input Plain text */
        "This is a 48-byte message (exactly 3 AES blocks)"
    },
    48U, /* Input data size */
    { /* Initialization vector */
        0x0U, 0x0U, 0x0U, 0x0U
    },
    {   /* Ciphered output */
        0x47, 0x59, 0xbf, 0x4c, 0x2a, 0xcb, 0x7d, 0x68, 0xa7, 0x36, 0x40, 0xcb, 0xad, 0x52, 0x4e, 0xb2,
        0x57, 0x02, 0xef, 0xd6, 0xa6, 0x82, 0xb6, 0xf0, 0x23, 0x77, 0xf3, 0x66, 0xf2, 0x3a, 0xb0, 0xf5,
        0x8d, 0xa5, 0xd9, 0xab, 0xb9, 0xb3, 0xe0, 0x67, 0x3d, 0xa9, 0x84, 0xf3, 0xc3, 0xc2, 0x32, 0x07
    }
};

static aesTestVector aesTestVec_ECB192BitKey_1 =
{
    Crypto_AES_ECB, /* Mode */
    Crypto_AES_KEY_SIZE_192BIT, /* Key 1 size */
    { /* Key 1 */
        0x6c, 0x3e, 0xa0, 0x47, 0x76, 0x30, 0xce, 0x21, 0xa2, 0xce, 0x33, 0x4a,
        0xa7, 0x46, 0xc2, 0xcd, 0x6c, 0x3e, 0xa0, 0x47, 0x76, 0x30, 0xce, 0x21
    },
    Crypto_AES_KEY_SIZE_128BIT, /* Key 2 size. Depends on mode */
    { /* Key 2. Depends on mode */
        0x0U, 0x0U, 0x0U, 0x0U
    },
    { /* Input Plain text */
        "This is a 48-byte message (exactly 3 AES blocks)"
    },
    48U, /* Input data size */
    { /* Initialization vector */
        0x0U, 0x0U, 0x0U, 0x0U
    },
    {   /* Ciphered output */
        0xf0, 0x7f, 0x27, 0x68, 0x91, 0x77, 0x2d, 0x8f, 0xe0, 0xee, 0x57, 0x01, 0x19, 0x74, 0xc1, 0xf6,
        0x01, 0x80, 0x84, 0x86, 0x0b, 0x60, 0x8c, 0xf9, 0xc4, 0xc7, 0xa7, 0x33, 0xbe, 0x27, 0xcf, 0x5a,
        0x2f, 0xc8, 0xc4, 0x75, 0x62, 0xb9, 0xc6, 0x86, 0x30, 0x76, 0x03, 0x12, 0xa8, 0xf2, 0x0c, 0xba
    }
};

static aesTestVector aesTestVec_ECB256BitKey_1 =
{
    Crypto_AES_ECB, /* Mode */
    Crypto_AES_KEY_SIZE_256BIT, /* Key 1 size */
    { /* Key 1 */
        0x6c, 0x3e, 0xa0, 0x47, 0x76, 0x30, 0xce, 0x21, 0xa2, 0xce, 0x33, 0x4a, 0xa7, 0x46, 0xc2, 0xcd,
        0x6c, 0x3e, 0xa0, 0x47, 0x76, 0x30, 0xce, 0x21, 0xa2, 0xce, 0x33, 0x4a, 0xa7, 0x46, 0xc2, 0xcd
    },
    Crypto_AES_KEY_SIZE_128BIT, /* Key 2 size. Depends on mode */
    { /* Key 2. Depends on mode */
        0x0U, 0x0U, 0x0U, 0x0U
    },
    { /* Input Plain text */
        "This is a 48-byte message (exactly 3 AES blocks)"
    },
    48U, /* Input data size */
    { /* Initialization vector */
        0x0U, 0x0U, 0x0U, 0x0U
    },
    {   /* Ciphered output */
        0xce, 0x0f, 0xe0, 0x6b, 0x31, 0xc0, 0x74, 0xf2, 0x72, 0x7a, 0x95, 0x27, 0xaa, 0x13, 0x7f, 0x3a,
        0x76, 0x64, 0x30, 0x31, 0x01, 0x0f, 0xdf, 0xda, 0xc1, 0x51, 0xda, 0xf5, 0x9d, 0x30, 0x19, 0x99,
        0xcd, 0x57, 0xdb, 0x29, 0xe2, 0x7f, 0x22, 0x42, 0x64, 0xb9, 0xad, 0xc2, 0x6b, 0xce, 0xb8, 0xce
    }
};

static aesTestVector aesTestVec_ECB256BitKey_2 =
{
    Crypto_AES_ECB, /* Mode */
    Crypto_AES_KEY_SIZE_256BIT, /* Key 1 size */
    { /* Key 1 */
        0x56, 0xe4, 0x7a, 0x38, 0xc5, 0x59, 0x89, 0x74, 0xbc, 0x46, 0x90, 0x3d, 0xba, 0x29, 0x03, 0x49,
        0x56, 0xe4, 0x7a, 0x38, 0xc5, 0x59, 0x89, 0x74, 0xbc, 0x46, 0x90, 0x3d, 0xba, 0x29, 0x03, 0x49
    },
    Crypto_AES_KEY_SIZE_128BIT, /* Key 2 size. Depends on mode */
    { /* Key 2. Depends on mode */
        0x0U, 0x0U, 0x0U, 0x0U
    },
    { /* Input Plain text */
        0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
        0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0
    },
    33, /* Input data size */
    { /* Initialization vector */
        0x0U, 0x0U, 0x0U, 0x0U
    },
    {   /* Ciphered output */
        0xbf, 0xfc, 0xc3, 0x54, 0x2f, 0x92, 0x0f, 0x0f, 0x8a, 0xb9, 0x2d, 0xf8, 0x65, 0x0d, 0xa5, 0x06,
        0xeb, 0x16, 0xe7, 0xcb, 0xe9, 0x15, 0x0f, 0xf8, 0xe2, 0x6f, 0xa8, 0xdd, 0xb9, 0x0b, 0x6b, 0x27,
        0x9c, 0xad, 0x4b, 0x00, 0x3c, 0xb7, 0xe8, 0x72, 0xc9, 0x4f, 0x69, 0xa5, 0xb5, 0x94, 0x51, 0xa4
    }
};

static aesTestVector aesTestVec_ICM128BitKey_1 =
{
    Crypto_AES_ICM, /* Mode */
    Crypto_AES_KEY_SIZE_128BIT, /* Key 1 size */
    { /* Key 1 */
        0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,	0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
    },
    Crypto_AES_KEY_SIZE_128BIT, /* Key 2 size. Depends on mode */
    { /* Key 2. Depends on mode */
        0x0U, 0x0U, 0x0U, 0x0U
    },
    { /* Input Plain text */
        0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,	0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a
    },
    16U, /* Input data size */
    { /* Initialization vector */
        0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,	0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0x00, 0x00
    },
    {   /* Ciphered output */
        0x8B, 0xFF, 0x13, 0xEB, 0x1B, 0x89, 0xC1, 0x16, 0x08, 0x5B, 0xCF, 0x7C, 0xAA, 0xB8, 0x59, 0x9E
    }
};
#if 0
static aesTestVector aesTestVec_CFB128BitKey_1 =
{
    Crypto_AES_CFB, /* Mode */
    Crypto_AES_KEY_SIZE_128BIT, /* Key 1 size */
    { /* Key 1 */
        0x6c, 0x3e, 0xa0, 0x47, 0x76, 0x30, 0xce, 0x21, 0xa2, 0xce, 0x33, 0x4a, 0xa7, 0x46, 0xc2, 0xcd
    },
    Crypto_AES_KEY_SIZE_128BIT, /* Key 2 size. Depends on mode */
    { /* Key 2. Depends on mode */
        0x0U, 0x0U, 0x0U, 0x0U
    },
    { /* Input Plain text */
        "This is a 48-byte message (exactly 3 AES blocks)"
    },
    48U, /* Input data size */
    { /* Initialization vector */
        0xc7, 0x82, 0xdc, 0x4c, 0x09, 0x8c, 0x66, 0xcb, 0xd9, 0xcd, 0x27, 0xd8, 0x25, 0x68, 0x2c, 0x81
    },
    {   /* Ciphered output */
        0xc2, 0xee, 0x33, 0x4b, 0xa4, 0xa8, 0x10, 0xf2, 0x6d, 0xdb, 0xd4, 0x8c, 0x2a, 0x39, 0x94, 0x73,
        0xe7, 0xd7, 0x87, 0xde, 0x89, 0x33, 0xfc, 0x70, 0x9a, 0x1c, 0x61, 0x99, 0x5b, 0xad, 0x35, 0x06,
        0x88, 0x51, 0xc9, 0xb4, 0x33, 0xaf, 0xfc, 0xf1, 0x76, 0x8d, 0xb6, 0x8d, 0xf0, 0x75, 0x4a, 0x14
    }
};

static aesTestVector aesTestVec_CFB128BitKey_2 =
{
    Crypto_AES_CFB, /* Mode */
    Crypto_AES_KEY_SIZE_128BIT, /* Key 1 size */
    { /* Key 1 */
        0x71, 0x15, 0x11, 0x93, 0x1a, 0x15, 0x62, 0xea, 0x73, 0x29, 0x0a, 0x8b, 0x0a, 0x37, 0xa3, 0xb4
    },
    Crypto_AES_KEY_SIZE_128BIT, /* Key 2 size. Depends on mode */
    { /* Key 2. Depends on mode */
        0x0U, 0x0U, 0x0U, 0x0U
    },
    { /* Input Plain text */
        0xf0, 0x66, 0xbe, 0x4b, 0xd6, 0x71, 0xeb, 0xc1, 0xc4, 0xcf, 0x3c, 0x00, 0x8e, 0xf2, 0xcf, 0x18
    },
    16U, /* Input data size */
    { /* Initialization vector */
        0x9d, 0xce, 0x23, 0xfd, 0x2d, 0xf5, 0x36, 0x0f, 0x79, 0x9c, 0xf1, 0x79, 0x84, 0xe4, 0x7c, 0x8d
    },
    {   /* Ciphered output */
        0x4a, 0x51, 0xa5, 0x19, 0xc7, 0x6d, 0x2f, 0x5b, 0xeb, 0xf2, 0x41, 0x3c, 0xec, 0x54, 0xd0, 0x07
    }
};

static aesTestVector aesTestVec_CFB192BitKey_1 =
{
    Crypto_AES_CFB, /* Mode */
    Crypto_AES_KEY_SIZE_192BIT, /* Key 1 size */
    { /* Key 1 */
        0x6c, 0x3e, 0xa0, 0x47, 0x76, 0x30, 0xce, 0x21, 0xa2, 0xce, 0x33, 0x4a,
        0xa7, 0x46, 0xc2, 0xcd, 0x6c, 0x3e, 0xa0, 0x47, 0x76, 0x30, 0xce, 0x21
    },
    Crypto_AES_KEY_SIZE_128BIT, /* Key 2 size. Depends on mode */
    { /* Key 2. Depends on mode */
        0x0U, 0x0U, 0x0U, 0x0U
    },
    { /* Input Plain text */
        "This is a 48-byte message (exactly 3 AES blocks)"
    },
    48U, /* Input data size */
    { /* Initialization vector */
        0xc7, 0x82, 0xdc, 0x4c, 0x09, 0x8c, 0x66, 0xcb, 0xd9, 0xcd, 0x27, 0xd8, 0x25, 0x68, 0x2c, 0x81
    },
    {   /* Ciphered output */
        0xc2, 0x8d, 0xeb, 0x13, 0x2e, 0xfd, 0x6b, 0x2a, 0x5f, 0x45, 0x4c, 0x72, 0xad, 0xb3, 0x28, 0x36,
        0x4b, 0x87, 0xcc, 0x6a, 0x85, 0x93, 0x9e, 0x98, 0x90, 0x67, 0x39, 0xdb, 0x24, 0x97, 0x80, 0x94,
        0x52, 0xb5, 0x28, 0xb4, 0x92, 0x8c, 0xd7, 0x8e, 0x8f, 0x7d, 0xc7, 0x80, 0x6d, 0xd6, 0x71, 0xde
    }
};

static aesTestVector aesTestVec_CFB256BitKey_1 =
{
    Crypto_AES_CFB, /* Mode */
    Crypto_AES_KEY_SIZE_256BIT, /* Key 1 size */
    { /* Key 1 */
        0x6c, 0x3e, 0xa0, 0x47, 0x76, 0x30, 0xce, 0x21, 0xa2, 0xce, 0x33, 0x4a, 0xa7, 0x46, 0xc2, 0xcd,
        0x6c, 0x3e, 0xa0, 0x47, 0x76, 0x30, 0xce, 0x21, 0xa2, 0xce, 0x33, 0x4a, 0xa7, 0x46, 0xc2, 0xcd
    },
    Crypto_AES_KEY_SIZE_128BIT, /* Key 2 size. Depends on mode */
    { /* Key 2. Depends on mode */
        0x0U, 0x0U, 0x0U, 0x0U
    },
    { /* Input Plain text */
        "This is a 48-byte message (exactly 3 AES blocks)"
    },
    48U, /* Input data size */
    { /* Initialization vector */
        0xc7, 0x82, 0xdc, 0x4c, 0x09, 0x8c, 0x66, 0xcb, 0xd9, 0xcd, 0x27, 0xd8, 0x25, 0x68, 0x2c, 0x81
    },
    {   /* Ciphered output */
        0xf6, 0x97, 0x7c, 0xc6, 0xed, 0x5e, 0x46, 0x3b, 0x40, 0xd0, 0xa4, 0x51, 0x90, 0xf7, 0x1e, 0x33,
        0x2b, 0x8f, 0x91, 0x86, 0x63, 0x63, 0xaa, 0xd6, 0x20, 0x9c, 0x9d, 0x26, 0xca, 0x0f, 0xb1, 0x10,
        0x16, 0xc7, 0x53, 0x3a, 0xa7, 0xaa, 0x99, 0xd8, 0xf8, 0x8c, 0x5a, 0xca, 0x06, 0x04, 0x55, 0x18
    }
};

static aesTestVector aesTestVec_CFB256BitKey_2 =
{
    Crypto_AES_CFB, /* Mode */
    Crypto_AES_KEY_SIZE_256BIT, /* Key 1 size */
    { /* Key 1 */
        0x56, 0xe4, 0x7a, 0x38, 0xc5, 0x59, 0x89, 0x74, 0xbc, 0x46, 0x90, 0x3d, 0xba, 0x29, 0x03, 0x49,
        0x56, 0xe4, 0x7a, 0x38, 0xc5, 0x59, 0x89, 0x74, 0xbc, 0x46, 0x90, 0x3d, 0xba, 0x29, 0x03, 0x49
    },
    Crypto_AES_KEY_SIZE_128BIT, /* Key 2 size. Depends on mode */
    { /* Key 2. Depends on mode */
        0x0U, 0x0U, 0x0U, 0x0U
    },
    { /* Input Plain text */
        0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
        0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0
    },
    33, /* Input data size */
    { /* Initialization vector */
        0x8c, 0xe8, 0x2e, 0xef, 0xbe, 0xa0, 0xda, 0x3c, 0x44, 0x69, 0x9e, 0xd7, 0xdb, 0x51, 0xb7, 0xd9
    },
    {   /* Ciphered output */
        0x45, 0x2b, 0xe6, 0x3b, 0xca, 0xa6, 0x4f, 0x00, 0x45, 0x0b, 0x09, 0x4f, 0xce, 0xa4, 0xad, 0x03,
        0x91, 0xdc, 0xf3, 0x91, 0x4a, 0x14, 0xfd, 0x23, 0x11, 0xbc, 0xde, 0x05, 0x5b, 0xfc, 0x5a, 0xcf, 0x0e
    }
};

#else
static aesTestVector aesTestVec_CFB128BitKey_1 =
{
    Crypto_AES_CFB, /* Mode */
    Crypto_AES_KEY_SIZE_128BIT, /* Key 1 size */
    { /* Key 1 */
        0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,	0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
    },
    Crypto_AES_KEY_SIZE_128BIT, /* Key 2 size. Depends on mode */
    { /* Key 2. Depends on mode */
        0x0U, 0x0U, 0x0U, 0x0U
    },
    { /* Input Plain text */
        0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
        0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
        0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
        0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10
    },
    64U, /* Input data size */
    { /* Initialization vector */
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
    },
    {   /* Ciphered output */
        0x3b, 0x3f, 0xd9, 0x2e, 0xb7, 0x2d, 0xad, 0x20, 0x33, 0x34, 0x49, 0xf8, 0xe8, 0x3c, 0xfb, 0x4a,
        0xc8, 0xa6, 0x45, 0x37, 0xa0, 0xb3, 0xa9, 0x3f, 0xcd, 0xe3, 0xcd, 0xad, 0x9f, 0x1c, 0xe5, 0x8b,
        0x26, 0x75, 0x1f, 0x67, 0xa3, 0xcb, 0xb1, 0x40, 0xb1, 0x80, 0x8c, 0xf1, 0x87, 0xa4, 0xf4, 0xdf,
        0xc0, 0x4b, 0x05, 0x35, 0x7c, 0x5d, 0x1c, 0x0e, 0xea, 0xc4, 0xc6, 0x6f, 0x9f, 0xf7, 0xf2, 0xe6
    }
};

static aesTestVector aesTestVec_CFB192BitKey_1 =
{
    Crypto_AES_CFB, /* Mode */
    Crypto_AES_KEY_SIZE_192BIT, /* Key 1 size */
    { /* Key 1 */
        0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b,
        0x80, 0x90, 0x79, 0xe5, 0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b
    },
    Crypto_AES_KEY_SIZE_128BIT, /* Key 2 size. Depends on mode */
    { /* Key 2. Depends on mode */
        0x0U, 0x0U, 0x0U, 0x0U
    },
    { /* Input Plain text */
        0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
        0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
        0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
        0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10
    },
    64U, /* Input data size */
    { /* Initialization vector */
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
    },
    {   /* Ciphered output */
        0xcd, 0xc8, 0x0d, 0x6f, 0xdd, 0xf1, 0x8c, 0xab, 0x34, 0xc2, 0x59, 0x09, 0xc9, 0x9a, 0x41, 0x74,
        0x67, 0xce, 0x7f, 0x7f, 0x81, 0x17, 0x36, 0x21, 0x96, 0x1a, 0x2b, 0x70, 0x17, 0x1d, 0x3d, 0x7a,
        0x2e, 0x1e, 0x8a, 0x1d, 0xd5, 0x9b, 0x88, 0xb1, 0xc8, 0xe6, 0x0f, 0xed, 0x1e, 0xfa, 0xc4, 0xc9,
        0xc0, 0x5f, 0x9f, 0x9c, 0xa9, 0x83, 0x4f, 0xa0, 0x42, 0xae, 0x8f, 0xba, 0x58, 0x4b, 0x09, 0xff
    }
};

static aesTestVector aesTestVec_CFB256BitKey_1 =
{
    Crypto_AES_CFB, /* Mode */
    Crypto_AES_KEY_SIZE_256BIT, /* Key 1 size */
    { /* Key 1 */
        0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
        0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4
    },
    Crypto_AES_KEY_SIZE_128BIT, /* Key 2 size. Depends on mode */
    { /* Key 2. Depends on mode */
        0x0U, 0x0U, 0x0U, 0x0U
    },
    { /* Input Plain text */
        0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
        0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
        0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
        0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10
    },
    64U, /* Input data size */
    { /* Initialization vector */
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
    },
    {   /* Ciphered output */
        0xdc, 0x7e, 0x84, 0xbf, 0xda, 0x79, 0x16, 0x4b, 0x7e, 0xcd, 0x84, 0x86, 0x98, 0x5d, 0x38, 0x60,
        0x39, 0xff, 0xed, 0x14, 0x3b, 0x28, 0xb1, 0xc8, 0x32, 0x11, 0x3c, 0x63, 0x31, 0xe5, 0x40, 0x7b,
        0xdf, 0x10, 0x13, 0x24, 0x15, 0xe5, 0x4b, 0x92, 0xa1, 0x3e, 0xd0, 0xa8, 0x26, 0x7a, 0xe2, 0xf9,
        0x75, 0xa3, 0x85, 0x74, 0x1a, 0xb9, 0xce, 0xf8, 0x20, 0x31, 0x62, 0x3d, 0x55, 0xb1, 0xe4, 0x71
    }
};
#endif

static aesTestVector aesTestVec_AES_CTR128BitKey_1 =
{
    Crypto_AES_CTR, /* Mode */
    Crypto_AES_KEY_SIZE_128BIT, /* Key 1 size */
    { /* Key 1 */
        0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,	0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
    },
    Crypto_AES_KEY_SIZE_128BIT, /* Key 2 size. Depends on mode */
    { /* Key 2. Depends on mode */
        0x0U, 0x0U, 0x0U, 0x0U
    },
    { /* Input Plain text */
        0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,	0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a
    },
    16U, /* Input data size */
    { /* Initialization vector */
        0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,	0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff
    },
    {   /* Ciphered output */
        0x87, 0x4d, 0x61, 0x91, 0xb6, 0x20, 0xe3, 0x26,	0x1b, 0xef, 0x68, 0x64, 0x99, 0x0d, 0xb6, 0xce
    },
    0U, /* AAD length - Not used */
    {   /* tag - Not used */
        0x0, 0x0, 0x0, 0x0
    },
    3U, /* User input 1 - Crypto_AES_COUNTER_SIZE_128BIT */
};

static aesTestVector aesTestVec_AES_CTR128BitKey_2 =
{
    Crypto_AES_CTR, /* Mode */
    Crypto_AES_KEY_SIZE_128BIT, /* Key 1 size */
    { /* Key 1 */
        0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,	0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
    },
    Crypto_AES_KEY_SIZE_128BIT, /* Key 2 size. Depends on mode */
    { /* Key 2. Depends on mode */
        0x0U, 0x0U, 0x0U, 0x0U
    },
    { /* Input Plain text */
        0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
        0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
        0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
        0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10
    },
    64U, /* Input data size */
    { /* Initialization vector */
        0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,	0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff
    },
    {   /* Ciphered output */
        0x87, 0x4d, 0x61, 0x91, 0xb6, 0x20, 0xe3, 0x26, 0x1b, 0xef, 0x68, 0x64, 0x99, 0x0d, 0xb6, 0xce,
        0x98, 0x06, 0xf6, 0x6b, 0x79, 0x70, 0xfd, 0xff, 0x86, 0x17, 0x18, 0x7b, 0xb9, 0xff, 0xfd, 0xff,
        0x5a, 0xe4, 0xdf, 0x3e, 0xdb, 0xd5, 0xd3, 0x5e, 0x5b, 0x4f, 0x09, 0x02, 0x0d, 0xb0, 0x3e, 0xab,
        0x1e, 0x03, 0x1d, 0xda, 0x2f, 0xbe, 0x03, 0xd1, 0x79, 0x21, 0x70, 0xa0, 0xf3, 0x00, 0x9c, 0xee
    },
    0U, /* AAD length - Not used */
    {   /* tag - Not used */
        0x0, 0x0, 0x0, 0x0
    },
    3U, /* User input 1 - Crypto_AES_COUNTER_SIZE_128BIT */
};

static aesTestVector aesTestVec_AES_CTR128BitKey_3 =
{
    Crypto_AES_CTR, /* Mode */
    Crypto_AES_KEY_SIZE_128BIT, /* Key 1 size */
    { /* Key 1 */
        0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,	0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
    },
    Crypto_AES_KEY_SIZE_128BIT, /* Key 2 size. Depends on mode */
    { /* Key 2. Depends on mode */
        0x0U, 0x0U, 0x0U, 0x0U
    },
    { /* Input Plain text */
        0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,	0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a
    },
    16U, /* Input data size */
    { /* Initialization vector */
        0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,	0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0x00, 0x00
    },
    {   /* Ciphered output */
        0x8B, 0xFF, 0x13, 0xEB, 0x1B, 0x89, 0xC1, 0x16, 0x08, 0x5B, 0xCF, 0x7C, 0xAA, 0xB8, 0x59, 0x9E
    },
    0U, /* AAD length - Not used */
    {   /* tag - Not used */
        0x0, 0x0, 0x0, 0x0
    },
    0U, /* User input 1 - Crypto_AES_COUNTER_SIZE_32BIT */
};

static aesTestVector aesTestVec_AES_CTR192BitKey_1 =
{
    Crypto_AES_CTR, /* Mode */
    Crypto_AES_KEY_SIZE_192BIT, /* Key 1 size */
    { /* Key 1 */
        0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b,
        0x80, 0x90, 0x79, 0xe5, 0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b
    },
    Crypto_AES_KEY_SIZE_128BIT, /* Key 2 size. Depends on mode */
    { /* Key 2. Depends on mode */
        0x0U, 0x0U, 0x0U, 0x0U
    },
    { /* Input Plain text */
        0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
        0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
        0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
        0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10
    },
    64U, /* Input data size */
    { /* Initialization vector */
        0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,	0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff
    },
    {   /* Ciphered output */
        0x1a, 0xbc, 0x93, 0x24, 0x17, 0x52, 0x1c, 0xa2, 0x4f, 0x2b, 0x04, 0x59, 0xfe, 0x7e, 0x6e, 0x0b,
        0x09, 0x03, 0x39, 0xec, 0x0a, 0xa6, 0xfa, 0xef, 0xd5, 0xcc, 0xc2, 0xc6, 0xf4, 0xce, 0x8e, 0x94,
        0x1e, 0x36, 0xb2, 0x6b, 0xd1, 0xeb, 0xc6, 0x70, 0xd1, 0xbd, 0x1d, 0x66, 0x56, 0x20, 0xab, 0xf7,
        0x4f, 0x78, 0xa7, 0xf6, 0xd2, 0x98, 0x09, 0x58, 0x5a, 0x97, 0xda, 0xec, 0x58, 0xc6, 0xb0, 0x50
    },
    0U, /* AAD length - Not used */
    {   /* tag - Not used */
        0x0, 0x0, 0x0, 0x0
    },
    3U, /* User input 1 - Crypto_AES_COUNTER_SIZE_128BIT */
};

static aesTestVector aesTestVec_AES_CTR256BitKey_1 =
{
    Crypto_AES_CTR, /* Mode */
    Crypto_AES_KEY_SIZE_256BIT, /* Key 1 size */
    { /* Key 1 */
        0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
        0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4
    },
    Crypto_AES_KEY_SIZE_128BIT, /* Key 2 size. Depends on mode */
    { /* Key 2. Depends on mode */
        0x0U, 0x0U, 0x0U, 0x0U
    },
    { /* Input Plain text */
        0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
        0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
        0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
        0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10
    },
    64U, /* Input data size */
    { /* Initialization vector */
        0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,	0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff
    },
    {   /* Ciphered output */
        0x60, 0x1e, 0xc3, 0x13, 0x77, 0x57, 0x89, 0xa5, 0xb7, 0xa7, 0xf5, 0x04, 0xbb, 0xf3, 0xd2, 0x28,
        0xf4, 0x43, 0xe3, 0xca, 0x4d, 0x62, 0xb5, 0x9a, 0xca, 0x84, 0xe9, 0x90, 0xca, 0xca, 0xf5, 0xc5,
        0x2b, 0x09, 0x30, 0xda, 0xa2, 0x3d, 0xe9, 0x4c, 0xe8, 0x70, 0x17, 0xba, 0x2d, 0x84, 0x98, 0x8d,
        0xdf, 0xc9, 0xc5, 0x8d, 0xb6, 0x7a, 0xad, 0xa6, 0x13, 0xc2, 0xdd, 0x08, 0x45, 0x79, 0x41, 0xa6
    },
    0U, /* AAD length - Not used */
    {   /* tag - Not used */
        0x0, 0x0, 0x0, 0x0
    },
    3U, /* User input 1 - Crypto_AES_COUNTER_SIZE_128BIT */
};

static aesTestVector aesTestVec_GCM128BitKey_1 =
{
    Crypto_AES_GCM,             /* Mode */
    Crypto_AES_KEY_SIZE_128BIT, /* Key 1 size */
    { /* Key 1 */
        0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c, 0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08
    },
    Crypto_AES_KEY_SIZE_128BIT, /* Key 2 size. Depends on mode */
    { /* Key 2. Depends on mode */
        0xb8, 0x3b, 0x53, 0x37, 0x08, 0xbf, 0x53, 0x5d, 0x0a, 0xa6, 0xe5, 0x29, 0x80, 0xd5, 0x3b, 0x78
    },
    { /* Input Plain text - 20 bytes of AAD data, followed by PAD of 12 bytes, followed by 60 bytes of data */
        0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef, 0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,
        0xab, 0xad, 0xda, 0xd2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5, 0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26, 0x9a,
        0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda, 0x2e, 0x4c, 0x30, 0x3d, 0x8a, 0x31, 0x8a, 0x72,
        0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53, 0x2f, 0xcf, 0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25,
        0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57, 0xba, 0x63, 0x7b, 0x39
    },
    60U, /* Input data size */
    { /* Initialization vector */
        0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad, 0xde, 0xca, 0xf8, 0x88, 0x00, 0x00, 0x00, 0x01
    },
    {   /* Ciphered output */
        0x42, 0x83, 0x1e, 0xc2, 0x21, 0x77, 0x74, 0x24, 0x4b, 0x72, 0x21, 0xb7, 0x84, 0xd0, 0xd4, 0x9c,
        0xe3, 0xaa, 0x21, 0x2f, 0x2c, 0x02, 0xa4, 0xe0, 0x35, 0xc1, 0x7e, 0x23, 0x29, 0xac, 0xa1, 0x2e,
        0x21, 0xd5, 0x14, 0xb2, 0x54, 0x66, 0x93, 0x1c, 0x7d, 0x8f, 0x6a, 0x5a, 0xac, 0x84, 0xaa, 0x05,
        0x1b, 0xa3, 0x0b, 0x39, 0x6a, 0x0a, 0xac, 0x97, 0x3d, 0x58, 0xe0, 0x91
    },
    20U, /* AAD length */
    {   /* Tag */
        0x5B, 0xC9, 0x4F, 0xBC, 0x32, 0x21, 0xA5, 0xDB, 0x94, 0xFA, 0xE9, 0x5A, 0xE7, 0x12, 0x1A, 0x47
    },
    2U /* User input 1 - Crypto_AES_GCM_HY0CALC */
};

static aesTestVector aesTestVec_CCM128BitKey_1 =
{
    Crypto_AES_CCM,             /* Mode */
    Crypto_AES_KEY_SIZE_128BIT, /* Key 1 size */
    { /* Key 1 */
        0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf
    },
    Crypto_AES_KEY_SIZE_128BIT, /* Key 2 size. Depends on mode */
    { /* Key 2. Depends on mode */
        0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf
    },
    { /* Input Plain text - 8 bytes of AAD data, followed by PAD of 8 bytes, followed by 23 bytes of data */
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E
    },
    23U, /* Input data size */
    { /* Initialization vector */
        0x01, 0x00, 0x00, 0x00, 0x03, 0x02, 0x01, 0x00, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0x00, 0x00
    },
    {   /* Ciphered output */
        0x58, 0x8C, 0x97, 0x9A, 0x61, 0xC6, 0x63, 0xD2, 0xF0, 0x66, 0xD0, 0xC2, 0xC0, 0xF9, 0x89, 0x80,
        0x6D, 0x5F, 0x6B, 0x61, 0xDA, 0xC3, 0x84
    },
    8U, /* AAD length */
    {   /* Tag - Only Crypto_AES_CCM_M_8 (8)bytes are valid */
        0x17, 0xE8, 0xD1, 0x2C, 0xFD, 0xF9, 0x26, 0xE0, 0x36, 0xe2, 0x90, 0x2a, 0xce, 0x86, 0x94, 0x52
    },
    (uint32_t)Crypto_AES_CCM_L_2, /* User input 1 - Crypto_AES_CCM_L_2 */
    (uint32_t)Crypto_AES_CCM_M_8  /* User input 2 - Crypto_AES_CCM_M_8 */
};

static CryptoAesTestCases cryptoAesTestCases[] =
{
    (void*)&aesTestVec_CBC128BitKey_1,
    (void*)&aesTestVec_CBC128BitKey_2,
    (void*)&aesTestVec_CBC192BitKey_1,
    (void*)&aesTestVec_CBC256BitKey_1,
    (void*)&aesTestVec_CBC256BitKey_2,
    (void*)&aesTestVec_CBC256BitKey_3,
    (void*)&aesTestVec_ECB128BitKey_1,
    (void*)&aesTestVec_ECB192BitKey_1,
    (void*)&aesTestVec_ECB256BitKey_1,
    (void*)&aesTestVec_ECB256BitKey_2,
    (void*)&aesTestVec_ICM128BitKey_1,
    (void*)&aesTestVec_CFB128BitKey_1,
    (void*)&aesTestVec_CFB192BitKey_1,
    (void*)&aesTestVec_CFB256BitKey_1,
    (void*)&aesTestVec_AES_CTR128BitKey_1,
    (void*)&aesTestVec_AES_CTR128BitKey_2,
    (void*)&aesTestVec_AES_CTR128BitKey_3,
    (void*)&aesTestVec_AES_CTR192BitKey_1,
    (void*)&aesTestVec_AES_CTR256BitKey_1,
    (void*)&aesTestVec_GCM128BitKey_1,
    (void*)&aesTestVec_CCM128BitKey_1,
    NULL
};

#ifdef __cplusplus
}
#endif

#endif  /* TEST_VECTOR_AES_H */

