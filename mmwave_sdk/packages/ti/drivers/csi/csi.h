/**
 *   @file  csi.h
 *
 *   @brief
 *      This is the header file for the CSI driver which exposes the
 *      data structures and exported API which can be used by the
 *      applications to use the CSI driver.
 *
 *  \par
 *  NOTE:
 *      (C) Copyright 2016 Texas Instruments, Inc.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *    Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the
 *    distribution.
 *
 *    Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/** @mainpage CSI Driver
 *
 *  The CSI Driver provides support for a high speed interface which allows
 *  the data to be transferred out of the XWR14xx to another device. The CSI
 *  driver works in conjunction with the CBUFF Driver.
 *
 *  The CSI header file should be included in an application as follows:
 *  @code
    #include <ti/drivers/csi.h>
    @endcode
 *
 *  The CSI Driver exposes the following register definition files:
 *  - CSI Phy Module     : csi/include/reg_dsiphy.h
 *  - CSI Protocol Engine: csi/include/reg_dsiproteng.h
 *
 *  ## Initializing the PHY Parameters #
 *  The CSI driver exposes an API CSI_phyParamsInit() which is used to setup and
 *  initialize the PHY Parameters to the default values. However it is possible
 *  that the applications would want to change these parameters from the default
 *  values as per their use case.
 *
 *  ## Initializing the driver #
 *  The CSI driver can be initialized using the CSI_open() API. The CSI driver
 *  is only used in conjunction with the CBUFF module.
 *
 *  ## Closing the driver #
 *  The CSI driver can be closed using the CSI_close() API. Please ensure that the
 *  CBUFF driver is closed before closing down the CSI driver.
 */

/** @defgroup CSI_DRIVER      CSI Driver
 */
#ifndef CSI_DRIVER_H
#define CSI_DRIVER_H

#include <ti/common/mmwave_error.h>
#include <ti/drivers/soc/soc.h>

/**
@defgroup CSI_DRIVER_EXTERNAL_FUNCTION            CSI Driver External Functions
@ingroup CSI_DRIVER
@brief
*   The section has a list of all the exported API which the applications need to
*   invoke in order to use the driver
*/
/**
@defgroup CSI_DRIVER_EXTERNAL_DATA_STRUCTURE      CSI Driver External Data Structures
@ingroup CSI_DRIVER
@brief
*   The section has a list of all the data structures which are exposed to the application
*/
/**
@defgroup CSI_DRIVER_ERROR_CODE                   CSI Driver Error Codes
@ingroup CSI_DRIVER
@brief
*   The section has a list of all the error codes which are generated by the CSI Driver
*   module
*/
/**
@defgroup CSI_DRIVER_INTERNAL_FUNCTION            CSI Driver Internal Functions
@ingroup CSI_DRIVER
@brief
*   The section has a list of all internal API which are not exposed to the external
*   applications.
*/
/**
@defgroup CSI_DRIVER_INTERNAL_DATA_STRUCTURE      CSI Driver Internal Data Structures
@ingroup CSI_DRIVER
@brief
*   The section has a list of all internal data structures which are used internally
*   by the CSI module.
*/

#ifdef __cplusplus
extern "C" {
#endif

/** @addtogroup CSI_DRIVER_ERROR_CODE
 *  Base error code for the CSI module is defined in the
 *  \include ti/common/mmwave_error.h
 @{ */

/**
 * @brief   Error Code: Invalid argument
 */
#define CSI_EINVAL                  (MMWAVE_ERRNO_CSI_BASE-1)

/**
 * @brief   Error Code: Out of memory
 */
#define CSI_ENOMEM                  (MMWAVE_ERRNO_CSI_BASE-2)

/**
 * @brief   Error Code: Operation cannot be implemented because the CSI driver
 * is in use
 */
#define CSI_EINUSE                  (MMWAVE_ERRNO_CSI_BASE-3)

/**
@}
*/

/** @addtogroup CSI_DRIVER_EXTERNAL_DATA_STRUCTURE
 @{ */

/**
 * @brief
 *  CSI Driver Handle
 */
typedef void*   CSI_Handle;

/**
 * @brief
 *  FIFO Arbiteration Mode
 *
 * @details
 *  Enumeration which describes the FIFO Arbiteration mode
 */
typedef enum CSI_FIFO_Arbiteration_e
{
    /**
     * @brief   Round Robin: This indicates that the FIFO is serviced starting
     * from the lowest enabled virtual channel identifier
     */
    CSI_FIFO_Arbiteration_RR = 0x0,

    /**
     * @brief   Sequential: This indicates that the all pending requests from
     * a virtual channel are processed before moving to the next channel.
     */
    CSI_FIFO_Arbiteration_SEQ
}CSI_FIFO_Arbiteration;

/**
 * @brief
 *  CSI virtual channel
 *
 * @details
 *  Enumeration which describes the CSI virtual channels
 */
typedef enum CSI_VirtualCh_e
{
    /**
     * @brief   Virtual Channel 0
     */
    CSI_VirtualCh_CH0               = 0,

    /**
     * @brief   Virtual Channel 1
     */
    CSI_VirtualCh_CH1               = 1,

    /**
     * @brief   Virtual Channel 2
     */
    CSI_VirtualCh_CH2               = 2,

    /**
     * @brief   Virtual Channel 3
     */
    CSI_VirtualCh_CH3               = 3,

    /**
     * @brief   Maximum number of virtual channels supported
     */
    CSI_VirtualCh_MAX_CHANNEL       = 4,

    /**
     * @brief   Invalid channel
     */
    CSI_VirtualCh_INVALID           = 0xFF,
}CSI_VirtualCh;

/**
 * @brief
 *  Virtual Channel FIFO Size
 *
 * @details
 *  Enumeration which describes the size of the FIFO used by
 *  the virtual channels.
 */
typedef enum CSI_VC_FIFO_Size_e
{
    /**
     * @brief   FIFO Size is 0*33 bits.
     */
    CSI_VC_FIFO_Size_0  = 0,

    /**
     * @brief   FIFO Size is 32*33 bits.
     */
    CSI_VC_FIFO_Size_32,

    /**
     * @brief   FIFO Size is 64*33 bits.
     */
    CSI_VC_FIFO_Size_64,

    /**
     * @brief   FIFO Size is 96*33 bits.
     */
    CSI_VC_FIFO_Size_96,

    /**
     * @brief   FIFO Size is 128*33 bits.
     */
    CSI_VC_FIFO_Size_128
}CSI_VC_FIFO_Size;

/**
 * @brief
 *  CSI Data Rates
 *
 * @details
 *  Enumeration which describes the data rates supported by the CSI interface.
 *
 *  Please note that the definitions have changed in SDK 2.1/newer releases.
 *  Old definitions seemed to imply data rate when it was really the HSClk
 *  rate which was twice the data rate
 *  The mapping from old values to new values is given below
 *
 *  Defines in SDK 2.0/older   Equivalent defines in SDK 2.1/newer 
 *  (this was actually         This is true datarate=[old_define]/2
 *  HSICLK_xxxMhz)
 *  ------------------------   ------------------------------------
 *  CSI_DataRate_1200Mhz       CSI_DataRate_600Mbps
 *  CSI_DataRate_900Mhz        CSI_DataRate_450Mbps
 *  CSI_DataRate_600Mhz        CSI_DataRate_300Mbps
 *  CSI_DataRate_450Mhz        CSI_DataRate_225Mbps
 *  CSI_DataRate_400Mhz        [invalid/not supported]
 *  CSI_DataRate_300Mhz        CSI_DataRate_150Mbps
 *  CSI_DataRate_225Mhz        [invalid/not supported]
 *  [No definition]            CSI_DataRate_400Mbps
 * 
 *  Old definitions in user code will result in compilation error
 *  and user should use the above mapping table to find the new 
 *  definition corresponding to the old one and use that in their code
 */
typedef enum CSI_DataRate_e
{
    /**
     * @brief   Data rate is 600Mbps
     */
    CSI_DataRate_600Mbps    =   0x1,

    /**
     * @brief   Data rate is 450Mbps
     */
    CSI_DataRate_450Mbps,

    /**
     * @brief   Data rate is 400Mbps
     */
    CSI_DataRate_400Mbps,

    /**
     * @brief   Data rate is 300Mbps
     */
    CSI_DataRate_300Mbps,

    /**
     * @brief   Data rate is 225Mbps
     */
    CSI_DataRate_225Mbps,

    /**
     * @brief   Data rate is 150Mbps
     */
    CSI_DataRate_150Mbps
}CSI_DataRate;

/**
 * @brief
 *  CSI Virtual Channel Configuration
 *
 * @details
 *  The structure describes the configuration which needs to be specified
 *  in order to create a virtual channel.
 */
typedef struct CSI_VirtualChannelCfg_t
{
    /**
     * @brief   Virtual channel id
     */
    CSI_VirtualCh       channelId;

    /**
     * @brief   Receive FIFO Size
     */
    CSI_VC_FIFO_Size    rxFIFOSize;

    /**
     * @brief   Transmit FIFO Size
     */
    CSI_VC_FIFO_Size    txFIFOSize;
}CSI_VirtualChannelCfg;

/**
 * @brief
 *  CSI Phy Parameters
 *
 * @details
 *  The structure describes the configuration for the PHY registers. This
 *  is an advanced configuration feature which is available and can be used
 *  by application developers to trim the CSI PHY.
 *
 *  @sa CSI_phyParamsInit
 */
typedef struct CSI_PhyParams_t
{
    /**
     * @brief   CSI PHY Registers
     */
    uint32_t    phyRegister[16];
}CSI_PhyParams;

/**
 * @brief
 *  CSI Configuration
 *
 * @details
 *  The structure describes the configuration information which is needed
 *  to initialize and setup the CSI Driver.
 */
typedef struct CSI_Cfg_t
{
    /**
     * @brief   SOC Handle used to enable the CSI
     */
    SOC_Handle              socHandle;

    /**
     * @brief   FIFO arbiteration mode
     */
    CSI_FIFO_Arbiteration   fifoArbiteration;

    /**
     * @brief   Data Rate
     */
    CSI_DataRate            dataRate;

    /**
     * @brief   CSI PHY Parameters which can be overwritten by application developers
     * to trim the PHY values.
     *
     * The PHY parameters can be set to the default values using the following API:
     *  @sa CSI_phyParamsInit
     */
    CSI_PhyParams           phyParams;

    /**
     * @brief   Virtual channel configuration: This is a table which specifies all the
     * virtual channels which need to be configured. If the channel id in the configuration
     * is set to an invalid value the configuration for the channel is skipped.
     */
    CSI_VirtualChannelCfg   virtualChannelCfg[CSI_VirtualCh_MAX_CHANNEL];
}CSI_Cfg;

/**
@}
*/

/*******************************************************************************************************
 * CSI Exported API:
 *******************************************************************************************************/

extern CSI_Handle CSI_open(CSI_Cfg* ptrCfg, int32_t* errCode);
extern int32_t CSI_close (CSI_Handle csiHandle, int32_t* errCode);
extern int32_t CSI_phyParamsInit (CSI_DataRate dataRate, CSI_PhyParams* ptrPhyParams);

#ifdef __cplusplus
}
#endif

#endif /* CSI_DRIVER_H */

