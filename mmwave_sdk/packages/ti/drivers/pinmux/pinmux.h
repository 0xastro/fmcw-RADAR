/*
 * Copyright (c) 2015, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/** ============================================================================
*  @file       pinmux.h
*
*  @brief      PINMUX driver interface
*
*/

/** @mainpage Pinmux Driver
*
*  The pinmux driver provides set/get APIs for the various PADs available on a device
*
*  The PINMUX header file should be included in an application as follows:
*  @code
*  #include <ti/drivers/pinmux/pinmux.h>
*  @endcode
*
*  ## Initializing the driver #
*  None is required. The pad under consideration can be configured directly by calling
*  any of the Set APIs
*  
*
*  @code

   // Setup the PINMUX 
   Pinmux_Set_FuncSel(SOC_XWR16XX_PINN5_PADBE, SOC_XWR16XX_PINN5_PADBE_MSS_UARTA_TX);
   Pinmux_Set_FuncSel(SOC_XWR16XX_PINN4_PADBD, SOC_XWR16XX_PINN4_PADBD_MSS_UARTA_RX);

*  @endcode
*
*  ## Instrumentation #
*  Uses DebugP_log functions for debug messages
*
*  ## Hardware Register Map #
*  The hardware register map used by this driver can be found at include/reg_pinmux.h
*
*  ============================================================================
*/
/**
 @defgroup PINMUX_DRIVER_EXTERNAL_FUNCTION            PINMUX Driver External Functions
 @ingroup PINMUX_DRIVER
 @brief
 *   The section has a list of all the exported API which the applications need to
 *   invoke in order to use the driver
 */
 /**
 @defgroup PINMUX_DRIVER_EXTERNAL_DATA_STRUCTURE      PINMUX Driver External Data Structures
 @ingroup PINMUX_DRIVER
 @brief
 *   The section has a list of all the data structures which are exposed to the application
 */
 /**
 @defgroup PINMUX_DRIVER_ERROR_CODE                   PINMUX Driver Error Codes
 @ingroup PINMUX_DRIVER
 @brief
 *   The section has a list of all the error codes which are generated by the PINMUX Driver
 *   module
 */
 /**
 @defgroup PINMUX_DRIVER_PAD_FUNCTIONS_16XX           PINMUX Driver Available PAD functionality for 16xx
 @ingroup PINMUX_DRIVER
 @brief
 *   The section has a list of all the functionality available at the various pads for 16xx
 */
 /**
 @defgroup PINMUX_DRIVER_PAD_FUNCTIONS_14XX           PINMUX Driver Available PAD functionality for 14xx
 @ingroup PINMUX_DRIVER
 @brief
 *   The section has a list of all the functionality available at the various pads for 14xx
 */
 /**
 @defgroup PINMUX_DRIVER_PAD_FUNCTIONS_18XX           PINMUX Driver Available PAD functionality for 18xx
 @ingroup PINMUX_DRIVER
 @brief
 *   The section has a list of all the functionality available at the various pads for 18xx
 */
 /**
 @defgroup PINMUX_DRIVER_PAD_FUNCTIONS_68XX           PINMUX Driver Available PAD functionality for 68xx
 @ingroup PINMUX_DRIVER
 @brief
 *   The section has a list of all the functionality available at the various pads for 68xx
 */


#ifndef ti_drivers_PINMUX__include
#define ti_drivers_PINMUX__include
    
#ifdef __cplusplus
    extern "C" {
#endif
    
#include <stdint.h>
#include <stddef.h>
#include <ti/common/mmwave_error.h>

#ifdef SOC_XWR14XX
#include <ti/drivers/pinmux/include/pinmux_xwr14xx.h>
#elif SOC_XWR16XX
#include <ti/drivers/pinmux/include/pinmux_xwr16xx.h>
#elif SOC_XWR18XX
#include <ti/drivers/pinmux/include/pinmux_xwr18xx.h>
#elif SOC_XWR68XX
#include <ti/drivers/pinmux/include/pinmux_xwr68xx.h>
#endif


/** @addtogroup PINMUX_DRIVER_ERROR_CODE
 *
 * @brief
 *  Base error code for the PINMUX module is defined in the
 *  \include ti/common/mmwave_error.h
 *
 @{ */

/**
 * @brief   Error Code: Invalid argument
 */
#define PINMUX_EINVAL                 (MMWAVE_ERRNO_PINMUX_BASE-1)

/**
 * @brief   Error Code: Operation cannot be done as pinmux base address is not defined.
 */
#define PINMUX_EINVALIDADDRESS                (MMWAVE_ERRNO_PINMUX_BASE-2)


/** @}*/


/** @addtogroup PINMUX_DRIVER_EXTERNAL_DATA_STRUCTURE
 @{ */

/*!
 *  @brief  PINMUX Output Override Enum
 *
 *  Enum for setting output override functionality
 *
 *
 *  @sa     Pinmux_Set_OverrideCtrl()
 */
typedef enum Pinmux_Output_Override {
    PINMUX_OUTPUT_DIS=0x0U,                 /*!<PAD output in override mode */
    PINMUX_OUTPUT_EN=0x1U,                  /*!<PAD output in override mode */
    PINMUX_OUTEN_RETAIN_HW_CTRL=0x2U        /*!<PAD output under hardware control */
}Pinmux_Output_Override_e;

/*!
 *  @brief  PINMUX Input Override Enum
 *
 *  Enum for setting input override functionality
 *
 *
 *  @sa     Pinmux_Set_OverrideCtrl()
 */
typedef enum Pinmux_Input_Override {
    PINMUX_INPUT_DIS=0x0U,                  /*!<PAD input in override mode */
    PINMUX_INPUT_EN=0x1U,                   /*!<PAD input in override mode */
    PINMUX_INPEN_RETAIN_HW_CTRL=0x2U        /*!<PAD input under hardware control */
}Pinmux_Input_Override_e;

/*!
 *  @brief  PINMUX Pull Enum
 *
 *  Enum for setting Pin Pull up/down functionality
 *
 *
 *  @sa     Pinmux_Set_Pull()
 */
typedef enum Pinmux_Pull {
    PINMUX_PULLDOWN_EN=0x0U,                /*!<PAD pull down */
    PINMUX_DISABLE_PULLS=0x1U,              /*!<PAD pull disabled */
    PINMUX_PULLUP_EN=0x2U                   /*!<PAD pull up */
}Pinmux_Pull_e;


/*!
 *  @brief  PINMUX Slew Enum
 *
 *  Enum for setting slew rate functionality
 *
 *
 *  @sa     Pinmux_Set_Slew()
 */
typedef enum Pinmux_SlewRate {
    PINMUX_SLEW_LOW=0x0U,                   /*!<PAD lower slew rate */
    PINMUX_SLEW_HIGH=0x1U                   /*!<PAD higher slew rate */
}Pinmux_SlewRate_e;

/** @}*/

/** @addtogroup PINMUX_DRIVER_EXTERNAL_FUNCTION
 @{ */


/** @fn int32_t Pinmux_Set_OverrideCtrl(uint32_t pin, Pinmux_Output_Override_e outputCtrl, Pinmux_Input_Override_e inputCtrl)
*   @brief Configurations for the input and output override control.
*
*    @param[in] pin: Pin number to be configured
*    @param[in] outputCtrl: Output control selection
*               The parameter \e outputCtrl can be one of the following values:
*                - \b PINMUX_OUTPUT_EN
*                - \b PINMUX_OUTPUT_DIS
*                - \b PINMUX_OUTEN_RETAIN_HW_CTRL
*    @param[in] inputCtrl: Input control selection
*               The parameter \e inputCtrl can be one of the following values:
*                - \b PINMUX_INPUT_EN
*                - \b PINMUX_INPUT_DIS
*                - \b PINMUX_INPEN_RETAIN_HW_CTRL
*
*    @return Value < 0 - in case of error
*            Value = 0 - success
*/
extern int32_t Pinmux_Set_OverrideCtrl(uint32_t pin, Pinmux_Output_Override_e outputCtrl, Pinmux_Input_Override_e inputCtrl);

/** @fn int32_t Pinmux_Set_Pull(uint32_t pin, Pinmux_Pull_e pullVal)
*   @brief Configurations for the pulls on the pins.
*
*    @param[in] pin: Pin number to be configured
*    @param[in] pullVal: Pull selection
*               The parameter \e pullVal can be one of the following values:
*                - \b PINMUX_PULLUP_EN
*                - \b PINMUX_PULLDOWN_EN
*                - \b PINMUX_DISABLE_PULLS
*
*    @return Value < 0 - in case of error
*            Value = 0 - success
*/
extern int32_t Pinmux_Set_Pull(uint32_t pin, Pinmux_Pull_e pullVal);

/** @fn int32_t Pinmux_Set_SlewRate(uint32_t pin, Pinmux_SlewRate_e slewVal)
*   @brief Configurations for the slew on the pins.
*
*    @param[in] pin: Pin number to be configured
*    @param[in] slewVal: Slew selection
*               The parameter \e slewVal can be one of the following values:
*                - \b PINMUX_SLEW_LOW
*                - \b PINMUX_SLEW_HIGH
*
*    @return Value < 0 - in case of error
*            Value = 0 - success
*/
extern int32_t Pinmux_Set_SlewRate(uint32_t pin, Pinmux_SlewRate_e slewVal);

/** @fn int32_t Pinmux_Set_FuncSel(uint32_t pin, uint32_t func)
*   @brief Setup the pin functionality.
*
*   This function sets up the functional personality of the pin.
*   The specified signal will be brought out on the pin.
*   As there is no strict check on the parameters passed, the values passed
*   must be from the macro specified in the header pinmux.h.
*
*    @param[in] pin: Pin number to be configured
*    @param[in] func: Desired signal functionality to be muxed onto the pin
*/
extern int32_t Pinmux_Set_FuncSel(uint32_t pin, uint32_t func);

/** @fn int32_t Pinmux_Get_OverrideCtrl(uint32_t pin,Pinmux_Output_Override_e *outputCtrl, Pinmux_Input_Override_e *inputCtrl )
*   @brief Get the pin override control for input and output.
*
*   This function gets the configured override of the pin.
*
*    @param[in]  pin: Pin number to be queried
*    @param[out] outputCtrl: value read from the OE_OVERRIDE and 
*                     OE_OVERRIDE_CTRL bits of a given valid pin (Pinmux_Output_Override_e) 
*    @param[out] inputCtrl: value read from the IE_OVERRIDE and 
*                     IE_OVERRIDE_CTRL bits of a given valid pin (Pinmux_Input_Override_e) 
*
*    @return    Value < 0 - in case of error; outputCtrl and inputCtrl have invalid values
*               Value = 0 - success; outputCtrl and inputCtrl have valid values
*
*/
extern int32_t Pinmux_Get_OverrideCtrl(uint32_t pin,Pinmux_Output_Override_e *outputCtrl, Pinmux_Input_Override_e *inputCtrl);


/** @fn int32_t Pinmux_Get_Pull(uint32_t pin)
*   @brief Get the pin pull up/down setting.
*
*   This function gets the configured Pull up/down of the pin.
*
*    @param[in] pin: Pin number to be queried
*
*    @return    Value < 0 - in case of error 
*               Value > 0 - value read from the Pi and pupdsel bits of a given valid pin (Pinmux_Pull_e)
*
*/
extern int32_t Pinmux_Get_Pull(uint32_t pin);

/** @fn int32_t Pinmux_Get_SlewRate(uint32_t pin)
*   @brief Get the pin slew rate.
*
*   This function gets the configured functionality of the pin.
*
*    @param[in] pin: Pin number to be queried
*
*    @return    Value < 0 - in case of error 
*               Value > 0 - value read from the SC1 bits of a given valid pin (Pinmux_SlewRate_e)
*
*/
extern int32_t Pinmux_Get_SlewRate(uint32_t pin);


/** @fn int32_t Pinmux_Get_FuncSel(uint32_t pin)
*   @brief Get the pin functionality.
*
*   This function gets the configured functionality of the pin.
*
*    @param[in] pin: Pin number to be configured
*
*    @return    Value < 0 - in case of error 
*               Value > 0 - value read from the Func_Sel bits of a given valid pin
*
*/
extern int32_t Pinmux_Get_FuncSel(uint32_t pin);


/** @}*/


#ifdef __cplusplus
}
#endif

#endif /* ti_drivers_PINMUX__include */


