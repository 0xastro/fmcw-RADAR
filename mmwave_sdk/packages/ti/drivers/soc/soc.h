/**
 *   @file  soc.h
 *
 *   @brief
 *      This is the header file for the SOC driver which exposes the
 *      data structures and exported API which can be used by the
 *      applications to use the SOC driver.
 *
 *  \par
 *  NOTE:
 *      (C) Copyright 2016 Texas Instruments, Inc.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *    Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the
 *    distribution.
 *
 *    Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/** @mainpage SOC Driver
 *
 *  The SOC Driver allows the application developers to use the following
 *  sub-modules:
 *  - MSS RCM
 *  - MSS TOP RCM
 *  - DSS
 *
 *  The SOC header file should be included in an application as follows:
 *  @code
    #include <ti/drivers/soc.h>
    @endcode
 *
 *  ## Initializing the driver #
 *  The SOC Driver needs to be initialized once across the System. This is
 *  done using the #SOC_init. None of the SOC API can be used without invoking
 *  this API
 *
 *  ## Register Layer #
 *  Refer to the soc/include directory for the register layers definitons for
 *  the following modules:
 *      RCM     : soc/include/reg_rcm.h
 *      TOP RCM : soc/include/reg_toprcm.h
 *      DSS     : soc/include/reg_dssreg.h
 */

/** @defgroup SOC_DRIVER      SOC Driver
 */
#ifndef SOC_DRIVER_H
#define SOC_DRIVER_H

#include <ti/common/mmwave_error.h>
#include <ti/drivers/osal/HwiP.h>


/**
@defgroup SOC_DRIVER_EXTERNAL_FUNCTION            SOC Driver External Functions
@ingroup SOC_DRIVER
@brief
*   The section has a list of all the exported API which the applications need to
*   invoke in order to use the driver
*/
/**
@defgroup SOC_DRIVER_EXTERNAL_DATA_STRUCTURE      SOC Driver External Data Structures
@ingroup SOC_DRIVER
@brief
*   The section has a list of all the data structures which are exposed to the application
*/
/**
@defgroup SOC_DRIVER_ERROR_CODE                   SOC Driver Error Codes
@ingroup SOC_DRIVER
@brief
*   The section has a list of all the error codes which are generated by the CRC Driver
*   module
*/
/**
@defgroup SOC_DRIVER_INTERNAL_FUNCTION            SOC Driver Internal Functions
@ingroup SOC_DRIVER
@brief
*   The section has a list of all internal API which are not exposed to the external
*   applications.
*/
/**
@defgroup SOC_DRIVER_INTERNAL_DATA_STRUCTURE      SOC Driver Internal Data Structures
@ingroup SOC_DRIVER
@brief
*   The section has a list of all internal data structures which are used internally
*   by the SOC module.
*/
/**
@defgroup SOC_DRIVER_INTERNAL_DEFINITION      SOC Driver Internal Definitions
@ingroup SOC_DRIVER
@brief
*   The section has a list of all internal definitions which are used internally
*   by the SOC module.
*/

#include <ti/drivers/soc/include/soc_common.h>

#ifdef SUBSYS_MSS
#include <ti/drivers/soc/include/soc_mpu.h>
#endif

#ifdef SOC_XWR14XX
#include <ti/drivers/soc/include/soc_xwr14xx.h>
#endif

#ifdef SOC_XWR16XX
#include <ti/drivers/soc/include/soc_xwr16xx.h>
#endif

#ifdef SOC_XWR18XX
#include <ti/drivers/soc/include/soc_xwr18xx.h>
#endif

#ifdef SOC_XWR68XX
#include <ti/drivers/soc/include/soc_xwr68xx.h>
#endif

/*******************************************************************************************************
 * SOC Driver Exported API:
 * (these are APIs common across all platforms. Platform specific apis are in include/soc_<platform>.h
 *******************************************************************************************************/

extern SOC_Handle SOC_init(SOC_Cfg* ptrCfg, int32_t* errCode);
extern int32_t SOC_unhaltBSS(SOC_Handle handle, int32_t* errCode);
extern int32_t SOC_haltBSS(SOC_Handle handle, int32_t* errCode);
extern int32_t SOC_enableLVDS(SOC_Handle handle, int32_t* errCode);
extern int32_t SOC_SPIOutputCtrl (SOC_Handle handle, uint8_t spiInst, uint8_t enable, int32_t* errCode);
extern int32_t SOC_waitBSSPowerUp(SOC_Handle handle, int32_t* errCode);
extern int32_t SOC_deinit(SOC_Handle handle, int32_t* errCode);
extern SOC_SysIntListenerHandle SOC_registerSysIntListener(SOC_Handle handle, SOC_SysIntListenerCfg* ptrListenerCfg, int32_t* errCode);
extern int32_t SOC_deregisterSysIntListener(SOC_Handle handle, uint32_t systemInterrupt, SOC_SysIntListenerHandle listenerHandle, int32_t* errCode);
extern uint32_t SOC_translateAddress(uint32_t inAddr, SOC_TranslateAddr_Dir direction, int32_t* errCode);
extern int32_t SOC_setPeripheralClock(   SOC_Handle handle, SOC_ModuleId module, SOC_PeripheralClkSource clkSource, uint8_t clkDivisor, int32_t* errCode);
extern int32_t SOC_initPeripheralRam(SOC_Handle handle, SOC_ModuleId module, int32_t* errCode);
extern void SOC_microDelay (uint32_t delayInMircoSecs);
extern int32_t SOC_triggerWarmReset(SOC_Handle handle, int32_t* errCode);
extern int32_t SOC_enableWatchdog(SOC_Handle handle, int32_t* errCode);
extern int32_t SOC_getDevicePartNumber(SOC_Handle handle, SOC_PartNumber *devicePartNum, int32_t* errCode);
extern double SOC_getDeviceRFFreqScaleFactor(SOC_Handle handle, int32_t* errCode);
extern int32_t SOC_softReset(SOC_Handle handle, int32_t* errCode);

extern int32_t SOC_isSecureDevice(SOC_Handle handle, int32_t* errCode);
extern int32_t SOC_controlSecureFirewall(SOC_Handle handle, uint32_t firewallModulesBitmap, uint8_t control, int32_t* errCode);

#ifdef __cplusplus
}
#endif

#endif /* SOC_DRIVER_H */


