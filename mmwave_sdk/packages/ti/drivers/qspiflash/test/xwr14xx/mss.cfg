/*
 *  Copyright 2016 by Texas Instruments Incorporated.
 *
 *  All rights reserved. Property of Texas Instruments Incorporated.
 *  Restricted rights to use, duplicate or disclose this code are
 *  granted through contract.
 *
 */
environment['xdc.cfg.check.fatal'] = 'false';

/********************************************************************
 ************************** BIOS Modules ****************************
 ********************************************************************/
var Memory    = xdc.useModule('xdc.runtime.Memory');
var BIOS      = xdc.useModule('ti.sysbios.BIOS');
var HeapMem   = xdc.useModule('ti.sysbios.heaps.HeapMem');
var HeapBuf   = xdc.useModule('ti.sysbios.heaps.HeapBuf');
var Task      = xdc.useModule('ti.sysbios.knl.Task');
var Idle      = xdc.useModule('ti.sysbios.knl.Idle');
var SEM       = xdc.useModule('ti.sysbios.knl.Semaphore');
var Event     = xdc.useModule('ti.sysbios.knl.Event');
var Hwi       = xdc.useModule('ti.sysbios.family.arm.v7r.vim.Hwi');
var System    = xdc.useModule('xdc.runtime.System');
var SysMin    = xdc.useModule('xdc.runtime.SysMin');
var SysStd    = xdc.useModule('xdc.runtime.SysStd');
var Diags     = xdc.useModule('xdc.runtime.Diags');
var Pmu       = xdc.useModule('ti.sysbios.family.arm.v7a.Pmu');
System.SupportProxy = SysStd;

/* Enable extended format for System_printf() */
System.extendedFormats = '%$L%$S%$F%f';

/* Default Heap Creation: Local L2 memory */
var heapMemParams           = new HeapMem.Params();
heapMemParams.size          = 40*1024;
heapMemParams.sectionName   = "systemHeap";
Program.global.heap0        = HeapMem.create(heapMemParams);
Memory.defaultHeapInstance  = Program.global.heap0;
/* Enable BIOS Task Scheduler */
BIOS.taskEnabled			= true;

Program.sectMap[".vecs"]	= "VECTORS";

/*
 * Create and install logger for the whole system
 */
 /*
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 4;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;
System.SupportProxy = SysStd;

/*
 * Build a custom BIOS library.  The custom library will be smaller than the
 * pre-built "instrumented" (default) and "non-instrumented" libraries.
 *
 * The BIOS.logsEnabled parameter specifies whether the Logging is enabled
 * within BIOS for this custom build.  These logs are used by the RTA and
 * UIA analysis tools.
 *
 * The BIOS.assertsEnabled parameter specifies whether BIOS code will
 * include Assert() checks.  Setting this parameter to 'false' will generate
 * smaller and faster code, but having asserts enabled is recommended for
 * early development as the Assert() checks will catch lots of programming
 * errors (invalid parameters, etc.)
 */
BIOS.libType = BIOS.LibType_Custom;
BIOS.logsEnabled = true;
BIOS.assertsEnabled = true;

