@echo off
SETLOCAL ENABLEEXTENSIONS
SETLOCAL ENABLEDELAYEDEXPANSION
REM
REM Prerequiste: Ensure that the MMWAVE_SDK_INSTALL_PATH has been setup properly before calling the script. 
REM
REM ================================================
REM generateMetaImage.bat <FLASHIMAGE> <SHMEM_ALLOC> <MSS_IMAGE_OUT> <BSS_IMAGE_BIN> <DSS_IMAGE_OUT>
REM 		where
REM         FLASHIMAGE:     [output] multicore file that will be generated by this script and should be used for flashing onto the board
REM         SHMEM_ALLOC:    [input]  shared memory allocation in 32-bit hex format where each byte (left to right) is for BSS,TCMB,TCMA,DSS
REM         MSS_IMAGE_OUT:  [input]  MSS input image in ELF (*.xer4f) format , use keyword NULL if not needed
REM         BSS_IMAGE_BIN:  [input]  BSS input image in RPRC (,bin) format, use keyword NULL if not needed
REM         DSS_IMAGE_OUT:  [input]  DSP input image in ELF (*.xe674) format, use keyword NULL if not needed
REM
REM		example:
REM			generateMetaImage.bat xwr16xx_mmw_demo.bin 0x00000006 xwr16xx_mmw_demo_mss.xer4f xwr16xx_radarss_rprc.bin xwr16xx_mmw_demo_dss.xe674
REM ================================================

REM ================================================
REM tools required
SET OUT2RPRC_EXE=%MMWAVE_SDK_INSTALL_PATH%\scripts\ImageCreator\out2rprc\out2rprc.exe
SET MULTCOREGEN=%MMWAVE_SDK_INSTALL_PATH%\scripts\ImageCreator\multicore_image_generator\MulticoreImageGen.exe
SET CRC_MULTI=%MMWAVE_SDK_INSTALL_PATH%\scripts\ImageCreator\crc_multicore_image\crc_multicore_image.exe
SET CRC_EXE=%MMWAVE_SDK_INSTALL_PATH%\scripts\ImageCreator\append_bin_crc\gen_bincrc32.exe
SET CREATE_CONFIGRPRC=%MMWAVE_SDK_INSTALL_PATH%\scripts\ImageCreator\create_ConfigRPRC\create_ConfigRPRC.exe
REM ================================================

echo Cmd line used: %0 %*

REM Calculate the number of arguments
SET /A ARGS_COUNT=0
FOR %%A in (%*) DO SET /A ARGS_COUNT+=1
if %ARGS_COUNT% lss 3 (
	echo Error: Invalid Usage. Insufficient parameters.
	echo        generateMetaImage.bat FLASHIMAGE SHMEM_ALLOC MSS_IMAGE_OUT BSS_IMAGE_BIN DSS_IMAGE_OUT
	exit /b 1 
)

SET FLASHIMAGE=%1
SET SHMEM_ALLOC=%2
SET MSS_IMAGE_OUT=%3
SET BSS_IMAGE_BIN=%4
SET DSS_IMAGE_OUT=%5
SET CONFIG_BIN=
SET MSS_IMAGE_BIN=
SET DSS_IMAGE_BIN=
SET TEMP_FILE=%FLASHIMAGE%.tmp

if [%MMWAVE_SDK_DEVICE%] == [awr14xx] goto :14xxdev
if [%MMWAVE_SDK_DEVICE%] == [iwr14xx] goto :14xxdev
goto :alldev

:14xxdev
    REM For xwr14xx ES3.0 an extra config file is needed that is generated based on the SHMEM_ALLOC setting
    REM format: create_ConfigRPRC -s <shared_mem_config>
    echo call %CREATE_CONFIGRPRC% -s %SHMEM_ALLOC%
    call %CREATE_CONFIGRPRC% -s %SHMEM_ALLOC%
    REM ar1xxx_conf.bin is the hardcoded file name generated by the utility
    SET CONFIG_BIN=ar1xxx_conf.bin

:alldev
REM Convert MSS and DSS out files to bin files
IF EXIST %MSS_IMAGE_OUT% (
    call:makeBinFileName %MSS_IMAGE_OUT% MSS_IMAGE_BIN
    REM Please note use of !MSS_IMAGE_BIN! due to delayed expansion inside the "IF"
    call:out2rprc %MSS_IMAGE_OUT% !MSS_IMAGE_BIN!
) ELSE (
    echo Error: Mandatory MSS image %MSS_IMAGE_OUT% not found
    exit /b 1  
)

IF EXIST %DSS_IMAGE_OUT% (
    call:makeBinFileName %DSS_IMAGE_OUT% DSS_IMAGE_BIN
    REM Please note use of !DSS_IMAGE_BIN! due to delayed expansion inside the "IF"
    call:out2rprc %DSS_IMAGE_OUT% !DSS_IMAGE_BIN!
)

IF EXIST %MSS_IMAGE_BIN% (SET "MSS_CORE=0x35510000 %MSS_IMAGE_BIN%") ELSE SET "MSS_CORE="
IF EXIST %BSS_IMAGE_BIN% (SET "BSS_CORE=0xb5510000 %BSS_IMAGE_BIN%") ELSE SET "BSS_CORE="
IF EXIST %DSS_IMAGE_BIN% (SET "DSS_CORE=0xd5510000 %DSS_IMAGE_BIN%") ELSE SET "DSS_CORE="
IF EXIST %CONFIG_BIN%    (SET "CONFIG=0xCF910000   %CONFIG_BIN%")    ELSE SET "CONFIG="

REM generate the multicore image
REM format:  MulticoreImageGen.exe <LE/BE> <DEV_ID> <SHMEM_ALLOC> <OUTPUT FILE> <COREID> <IMAGE1> <COREID> <IMAGE2> ..
echo call %MULTCOREGEN% LE 37 %SHMEM_ALLOC% %FLASHIMAGE% %CONFIG% %MSS_CORE% %BSS_CORE% %DSS_CORE%
call %MULTCOREGEN% LE 37 %SHMEM_ALLOC% %FLASHIMAGE% %CONFIG% %MSS_CORE% %BSS_CORE% %DSS_CORE%

REM generate and fill in the CRC for the multicore images
echo call %CRC_MULTI% %FLASHIMAGE% %TEMP_FILE%
call %CRC_MULTI% %FLASHIMAGE% %TEMP_FILE%

REM append crc to the flash image
echo call %CRC_EXE% %FLASHIMAGE%
call %CRC_EXE% %FLASHIMAGE%

IF EXIST %FLASHIMAGE% (
    echo **************************************************************************
    echo Built the flash binary %FLASHIMAGE%    
    echo **************************************************************************
)

REM Delete the temp files
IF EXIST %MSS_IMAGE_BIN% (del %MSS_IMAGE_BIN%)
IF [%DSS_IMAGE_BIN%] NEQ [] (IF EXIST !DSS_IMAGE_BIN! (del !DSS_IMAGE_BIN!))
IF [%CONFIG_BIN%] NEQ [] (IF EXIST !CONFIG_BIN! (del !CONFIG_BIN!))
del %TEMP_FILE%
goto:eof


REM -------------------------------------------------------------------
REM Function out2rprc converts from out(.xer4f,.xe674) file to rprc(.bin) format
REM -------------------------------------------------------------------
:out2rprc
@REM To convert .out to .bin file (without offset)
echo call %OUT2RPRC_EXE% %1 %2
call %OUT2RPRC_EXE% %1 %2

@REM DO NOT change the below if check. This is the only one that works consistently
if ERRORLEVEL 1 (
    call set RETVAL=%%ERRORLEVEL%%
    call echo %%RETVAL%%
    echo Error: out2rprc failed for file %1 !!!
    @REM Delete the bin file since it is not complete
    IF EXIST %2 (
        echo Deleting %2 since it is incomplete !!!
        DEL /F /Q %2
    )
    exit /b %RETVAL%
)
goto:eof

REM --------------------------------------------------------
REM Function makeBinFileName takes the out file name as input 
REM and returns the same name with .bin extension in the second arg
REM --------------------------------------------------------

:makeBinFileName
SET filename=%~n1
SET ext=%~x1
REM echo Out file name is %filename% and extension is %ext%
IF [%ext%] == [.bin] (
    echo "Error: %1 file passed for MSS/DSS. From mmwave_sdk 2.1 release onwards generateMetaImage should be passed out files(.xer4f/.xe674) for MSS/DSS and not .bin"
    exit /b 1
)
SET "%2=%filename%.bin"
goto:eof
