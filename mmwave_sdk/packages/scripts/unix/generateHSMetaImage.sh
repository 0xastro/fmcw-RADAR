#!/bin/bash
#
#
# Prerequisite: Ensure that the MMWAVE_SDK_INSTALL_PATH & MMWAVE_SECDEV_INSTALL_PATH 
# have been setup properly before calling the script.
#
#
# ================================================
#  generateHSMetaImage.sh <FLASHIMAGE> <SHMEM_ALLOC> <MSS_IMAGE_OUT> <BSS_IMAGE_BIN> <DSS_IMAGE_OUT> <HSIMAGE_CFG>
#       where
#           FLASHIMAGE:     [output] multicore HS file that will be generated by this script and should be used for flashing onto the board
#           SHMEM_ALLOC:    [input]  shared memory allocation in 32-bit hex format where each byte (left to right) is for BSS,TCMB,TCMA,DSS
#           MSS_IMAGE_OUT:  [input]  MSS input image in ELF (*.xer4f) format , use keyword NULL if not needed
#           BSS_IMAGE_BIN:  [input]  BSS input image in RPRC (.bin) format, use keyword NULL if not needed
#           DSS_IMAGE_OUT:  [input]  DSP input image in ELF (*.xe674) format, use keyword NULL if not needed
#           HSIMAGE_CFG:    [input]  certificate and key related configuration file
#
#       example:
#           generateHSMetaImage.sh xwr16xx_mmw_secure.bin 0x00000006 xwr16xx_mmw_demo_mss.xer4f xwr16xx_radarss_rprc.bin xwr16xx_mmw_demo_dss.xe674 hsimage.cfg
# ================================================

########################################################################################
# Utility function which is used to print an error message on the build console
########################################################################################
function printErrorMsg ()
{
  echo -e "\033[31m"${1}${2}
  echo -e -n "\033[0m"
}

########################################################################################
# Utility function which is used to print an informational message on the build console
########################################################################################
function printInfoMsg ()
{
  echo -e "\033[33m"${1}${2}
  echo -e -n "\033[0m"
}

########################################################################################
# Utility function makeBinFileName takes the out file name as input 
# and returns the same name with .bin extension in the second arg
########################################################################################
function makeBinFileName ()
{
    filename="${1%%.*}"
    ext="${1##*.}"
    #echo "Out file name (without extension) is $filename and extension is $ext"

    if [ "$ext" == "bin" ]; then
        printErrorMsg "Error: $1 file passed for MSS/DSS. generateHSMetaImage should be passed \
out files(.xer4f/.xe674) for MSS/DSS and not .bin"
        exit 1
    fi

    local  __binFileNameVar=$2
    local  binFileName=$filename.bin
    eval $__binFileNameVar="'$binFileName'"
}


# ================================================
# argument checking and parsing
if [ -z $MMWAVE_SECDEV_INSTALL_PATH ]; then
    printInfoMsg "Info: MMWAVE_SECDEV_INSTALL_PATH is not defined. Skipping secure build"    
    exit 0
fi
if [ -z $MMWAVE_SDK_INSTALL_PATH ]; then
    printErrorMsg "Error: MMWAVE_SDK_INSTALL_PATH [mmWave SDK Package Location] needs to be defined"    
    exit 1
fi

echo "Cmd line used: $0 $@"

if [ $# -lt 6 ]; then
    printErrorMsg "Error: Invalid Usage. Insufficient parameters."
    printErrorMsg "    generateHSMetaImage.sh <FLASHIMAGE> <SHMEM_ALLOC> <MSS_IMAGE_OUT> <BSS_IMAGE_BIN> <DSS_IMAGE_OUT> <HSIMAGE_CFG>"
    exit 1
fi

FLASHIMAGE=$1
SHMEM_ALLOC=$2
MSS_IMAGE_OUT=$3
BSS_IMAGE_BIN=$4
DSS_IMAGE_OUT=$5
HSIMAGE_CFG=$6

if [ "$MMWAVE_SDK_DEVICE" == "awr14xx" ] || [ "$MMWAVE_SDK_DEVICE" == "iwr14xx" ]
then
    printErrorMsg " Error: generateHSMetaImage not supported for xwr14xx !!!"
    exit 1
fi


# ================================================
# tools required

HS_IMAGE_CREATOR=$MMWAVE_SECDEV_INSTALL_PATH/hs_image_creator/hs_image_creator

# ================================================

# ================================================
# setup arguments for hs image creator
# Following are mandatory parameters
HS_IMAGE_CREATOR_CMDLINE_ARGS="-o $FLASHIMAGE -f $HSIMAGE_CFG -m $MSS_IMAGE_OUT -s $SHMEM_ALLOC"

# add BSS to the cmd line if it is not NULL
if [ "$BSS_IMAGE_BIN" != "NULL" ]
then
    HS_IMAGE_CREATOR_CMDLINE_ARGS="$HS_IMAGE_CREATOR_CMDLINE_ARGS -b $BSS_IMAGE_BIN"
fi

# add DSS to the cmd line if it is not NULL
if [ "$DSS_IMAGE_OUT" != "NULL" ]
then
    HS_IMAGE_CREATOR_CMDLINE_ARGS="$HS_IMAGE_CREATOR_CMDLINE_ARGS -d $DSS_IMAGE_OUT"
fi

# ================================================

# ================================================
# 
# generate secure flash multicore image
echo $HS_IMAGE_CREATOR $HS_IMAGE_CREATOR_CMDLINE_ARGS
$HS_IMAGE_CREATOR $HS_IMAGE_CREATOR_CMDLINE_ARGS

if [ -e "$FLASHIMAGE" ]; then
    printInfoMsg "**************************************************************************"
    printInfoMsg "Built the secure flash binary $FLASHIMAGE"
    printInfoMsg "**************************************************************************"
fi

# Find the bin file names generated by hs_image_creator so that they can be deleted after the metaimage generation
if [ -e "$MSS_IMAGE_OUT" ]; then
    makeBinFileName $MSS_IMAGE_OUT MSS_IMAGE_BIN
    if [ -e "$MSS_IMAGE_BIN" ]; then
        rm -f $MSS_IMAGE_BIN
    fi
fi

if [ -e "$DSS_IMAGE_OUT" ]; then
    makeBinFileName $DSS_IMAGE_OUT DSS_IMAGE_BIN
    if [ -e "$DSS_IMAGE_BIN" ]; then
        rm -f $DSS_IMAGE_BIN
    fi
fi

