#!/bin/bash
#
# Prerequiste: Ensure that the MMWAVE_SDK_INSTALL_PATH has been setup properly before calling
# the script.
#
# ================================================
# generateMetaImage.sh <FLASHIMAGE> <SHMEM_ALLOC> <MSS_IMAGE_OUT> <BSS_IMAGE_BIN> <DSS_IMAGE_OUT>
# 		where
# 			FLASHIMAGE: 	[output] multicore file that will be generated by this script and should be used for flashing onto the board
#			SHMEM_ALLOC: 	[input]  shared memory allocation in 32-bit hex format where each byte (left to right) is for BSS,TCMB,TCMA,DSS
#           MSS_IMAGE_OUT:  [input]  MSS input image in ELF (*.xer4f) format , use keyword NULL if not needed
#           BSS_IMAGE_BIN:  [input]  BSS input image in RPRC (.bin) format, use keyword NULL if not needed
#           DSS_IMAGE_OUT:  [input]  DSP input image in ELF (*.xe674) format, use keyword NULL if not needed
#
#		example:
#			generateMetaImage.sh xwr16xx_mmw.bin 0x00000006 xwr16xx_mmw_demo_mss.xer4f xwr16xx_radarss_rprc.bin xwr16xx_mmw_demo_dss.xe674
# ================================================

########################################################################################
# Utility function which is used to print an error message on the build console
########################################################################################
function printErrorMsg ()
{
  echo -e "\033[31m"${1}${2}
  echo -e -n "\033[0m"
}

########################################################################################
# Utility function which is used to print an informational message on the build console
########################################################################################
function printInfoMsg ()
{
  echo -e "\033[33m"${1}${2}
  echo -e -n "\033[0m"
}

########################################################################################
# Utility function out2rprc converts from out(.xer4f,.xe674) file to rprc(.bin) format
########################################################################################
function out2rprc ()
{
    # To convert .out to .bin file
    # mono runs windows executable on linux
    echo mono ${OUT2RPRC_EXE} "$@"
    mono ${OUT2RPRC_EXE} "$@"
    retval=$?
    if [ $retval -ne 0 ]; then
        echo "Error: out2rprc failed for file $1 !!!"
        if [ ! -z ${BUILD_NOTES} ]; then
            echo "" >> ${BUILD_NOTES}
            echo "Error: out2rprc failed for file $1 !!!" >> ${BUILD_NOTES}
        fi

        # Delete the bin file since it is not complete
        if [ -f $2 ]; then
            echo "Deleting $2 since it is incomplete !!!"
            rm -f $2
        fi
        exit 1 
    fi
}

########################################################################################
# Utility function makeBinFileName takes the out file name as input 
# and returns the same name with .bin extension in the second arg
########################################################################################
function makeBinFileName ()
{
    filename="${1%%.*}"
    ext="${1##*.}"
    echo "Out file name (without extension) is $filename and extension is $ext"

    if [ "$ext" == "bin" ]; then
        printErrorMsg "Error: $1 file passed for MSS/DSS. From mmwave_sdk 2.1 release onwards generateMetaImage \
should be passed out files(.xer4f/.xe674) for MSS/DSS and not .bin"
        exit 1
    fi

    local  __binFileNameVar=$2
    local  binFileName=$filename.bin
    eval $__binFileNameVar="'$binFileName'"
}

# ================================================
# argument checking and parsing
echo "Cmd line used: $0 $@"

if [ -z $MMWAVE_SDK_INSTALL_PATH ]; then
    printErrorMsg "Error: MMWAVE_SDK_INSTALL_PATH [mmWave SDK Package Location] needs to be defined"    
    exit 1
fi
if [ $# -lt 3 ]; then
    printErrorMsg "Error: Invalid Usage. Insufficient parameters."
    printErrorMsg "        generateMetaImage.sh <FLASHIMAGE> <SHMEM_ALLOC> <MSS_IMAGE_OUT> <BSS_IMAGE_BIN> <DSS_IMAGE_OUT>"
    exit 1
fi

FLASHIMAGE=$1
SHMEM_ALLOC=$2
MSS_IMAGE_OUT=$3
BSS_IMAGE_BIN=$4
DSS_IMAGE_OUT=$5
CONFIG_BIN=
MSS_IMAGE_BIN=
DSS_IMAGE_BIN=

# ================================================

# ================================================
# tools required
OUT2RPRC_EXE=$MMWAVE_SDK_INSTALL_PATH/scripts/ImageCreator/out2rprc/out2rprc.exe
MULTCOREGEN=$MMWAVE_SDK_INSTALL_PATH/scripts/ImageCreator/multicore_image_generator/MulticoreImageGen
CRC_MULTI=$MMWAVE_SDK_INSTALL_PATH/scripts/ImageCreator/crc_multicore_image/crc_multicore_image
GEN_BINCRC32=$MMWAVE_SDK_INSTALL_PATH/scripts/ImageCreator/append_bin_crc/gen_bincrc32
CREATE_CONFIGRPRC=$MMWAVE_SDK_INSTALL_PATH/scripts/ImageCreator/create_ConfigRPRC/create_ConfigRPRC
TEMP_FILE=$FLASHIMAGE.tmp
# ================================================

if [ "$MMWAVE_SDK_DEVICE" == "awr14xx" ] || [ "$MMWAVE_SDK_DEVICE" == "iwr14xx" ]; then
    # For xwr14xx ES3.0 an extra config file is needed that is generated based on the SHMEM_ALLOC setting
    # format: create_ConfigRPRC -s <shared_mem_config>
    echo $CREATE_CONFIGRPRC -s $SHMEM_ALLOC
    $CREATE_CONFIGRPRC -s $SHMEM_ALLOC
    # ar1xxx_conf.bin is the hardcoded file name generated by the utility
    CONFIG_BIN=ar1xxx_conf.bin
fi

# Convert MSS and DSS out files to bin files
if [ -e "$MSS_IMAGE_OUT" ]; then
    makeBinFileName $MSS_IMAGE_OUT MSS_IMAGE_BIN
    out2rprc $MSS_IMAGE_OUT $MSS_IMAGE_BIN
else
    printErrorMsg "Error: Mandatory MSS image $MSS_IMAGE_OUT not found"
    exit 1  
fi

if [ -e "$DSS_IMAGE_OUT" ]; then
    makeBinFileName $DSS_IMAGE_OUT DSS_IMAGE_BIN
    out2rprc $DSS_IMAGE_OUT $DSS_IMAGE_BIN
fi

# ================================================
# setup arguments for MulticoreImageGen
if [ -e "$MSS_IMAGE_BIN" ]
then
	MSS_CORE="0x35510000 $MSS_IMAGE_BIN"
else
	MSS_CORE=
fi
if [ -e "$BSS_IMAGE_BIN" ]
then
	BSS_CORE="0xb5510000 $BSS_IMAGE_BIN"
else
	BSS_CORE=
fi
if [ -e "$DSS_IMAGE_BIN" ]
then
	DSS_CORE="0xd5510000 $DSS_IMAGE_BIN"
else
	DSS_CORE=
fi
if [ -e "$CONFIG_BIN" ]
then
    CONFIG="0xCF910000 $CONFIG_BIN"
else
    CONFIG=
fi

# ================================================

# ================================================
# 
# generate the multicore image
# format:  MulticoreImageGen.exe <LE/BE> <DEV_ID> <SHMEM_ALLOC> <OUTPUT FILE> <COREID> <IMAGE1> <COREID> <IMAGE2> ..
echo $MULTCOREGEN LE 37 $SHMEM_ALLOC $FLASHIMAGE $CONFIG $MSS_CORE $BSS_CORE $DSS_CORE
$MULTCOREGEN LE 37 $SHMEM_ALLOC $FLASHIMAGE $CONFIG $MSS_CORE $BSS_CORE $DSS_CORE

# generate and fill in the CRC for the multicore images
echo $CRC_MULTI $FLASHIMAGE $TEMP_FILE
$CRC_MULTI $FLASHIMAGE $TEMP_FILE

# append crc to the flash image
$GEN_BINCRC32 $FLASHIMAGE

if [ -e "$FLASHIMAGE" ]; then
    printInfoMsg "**************************************************************************"
    printInfoMsg "Built the flash binary $FLASHIMAGE"
    printInfoMsg "**************************************************************************"
fi

# remove temp files
if [ -e "$TEMP_FILE" ]; then 
    rm -f $TEMP_FILE
fi
if [ -e "$MSS_IMAGE_BIN" ]; then
    rm -f $MSS_IMAGE_BIN
fi
if [ -e "$DSS_IMAGE_BIN" ]; then
    rm -f $DSS_IMAGE_BIN
fi
if [ -e "$CONFIG_BIN" ]; then
    rm -f $CONFIG_BIN
fi

